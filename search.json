[{"path":[]},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement meetziyang@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://gongziyang.com/JointODE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Ziyang Gong Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Comparison","text":"vignette compares joint modeling (JSM package) time-varying Cox regression using simulated data known parameters. Joint models properly account measurement error informative dropout, naive approaches may yield biased estimates.","code":""},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"model-structure","dir":"Articles","previous_headings":"Introduction","what":"Model Structure","title":"Comparison","text":"Longitudinal trajectory: Y_i(t) = \\beta_0 + \\beta_1 t + \\beta_2 x_{1i} + \\beta_3 x_{2i} + b_{} + \\epsilon_i(t) Survival hazard: h_i(t) = h_0(t) \\exp(\\gamma_1 w_{1i} + \\gamma_2 w_{2i} + \\alpha m_i(t)) m_i(t) true biomarker value \\alpha quantifies association.","code":""},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Comparison","text":"","code":"library(JointODE) library(JSM) library(nlme) library(survival) library(ggplot2) library(dplyr) library(tidyr) library(patchwork)  set.seed(2024) # Generate data with known parameters sim_data <- JointODE::simulate(   n = 400, # Number of subjects   sigma_b = 0.1, # Measurement error SD   verbose = FALSE )  long_data <- sim_data$longitudinal_data surv_data <- sim_data$survival_data  # Data summary cat(sprintf(   \"Dataset: %d subjects, %d observations\\n\",   n_distinct(long_data$id), nrow(long_data) )) #> Dataset: 400 subjects, 5468 observations cat(sprintf(   \"Events: %.0f%% (median follow-up: %.1f)\\n\",   100 * mean(surv_data$status),   median(surv_data$time) )) #> Events: 74% (median follow-up: 5.3)"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Comparison","text":"","code":"# Format data for JSM package jsm_data <- dataPreprocess(   long = long_data %>% rename(ID = id),   surv = surv_data %>% rename(ID = id, survtime = time),   id.col = \"ID\",   long.time.col = \"time\",   surv.time.col = \"survtime\",   surv.event.col = \"status\" ) %>%   rename(     obstime = time,     start = start.join,     stop = stop.join,     event = event.join   )  surv_data_jsm <- surv_data %>% rename(ID = id, survtime = time)"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"exploratory-analysis","dir":"Articles","previous_headings":"","what":"Exploratory Analysis","title":"Comparison","text":"","code":"# Visualize longitudinal trajectories long_data %>%   filter(id %in% sample(unique(id), 20)) %>%   ggplot(aes(time, v)) +   geom_line(aes(group = id), alpha = 0.2) +   geom_smooth(se = TRUE, color = \"#3498DB\", linewidth = 1.2) +   theme_minimal(base_size = 10) +   labs(     x = \"Time\", y = \"Biomarker\",     title = \"Individual Trajectories with Population Mean\"   ) # Survival distribution km_fit <- survfit(Surv(survtime, status) ~ 1, data = surv_data_jsm) plot(km_fit,   xlab = \"Time\", ylab = \"Survival Probability\",   main = sprintf(     \"Event Rate: %.0f%%, Median: %.1f\",     100 * mean(surv_data_jsm$status), median(km_fit)   ),   conf.int = TRUE, mark.time = FALSE, lwd = 2, col = \"#E74C3C\" ) grid(lty = 3, col = \"gray90\")"},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"longitudinal-model","dir":"Articles","previous_headings":"Model Fitting","what":"Longitudinal Model","title":"Comparison","text":"","code":"fit_lme <- lme(   v ~ obstime + x1 + x2,   random = ~ 1 | ID,   data = jsm_data,   control = lmeControl(opt = \"optim\") )  summary(fit_lme) #> Linear mixed-effects model fit by REML #>   Data: jsm_data  #>        AIC      BIC    logLik #>   3858.946 3898.581 -1923.473 #>  #> Random effects: #>  Formula: ~1 | ID #>         (Intercept)  Residual #> StdDev:   0.1537356 0.3266545 #>  #> Fixed effects:  v ~ obstime + x1 + x2  #>                   Value   Std.Error   DF  t-value p-value #> (Intercept) -0.09442697 0.010262856 5067 -9.20085       0 #> obstime      0.09609937 0.002036320 5067 47.19266       0 #> x1           0.29023869 0.009439471  397 30.74735       0 #> x2           0.14462882 0.009086661  397 15.91661       0 #>  Correlation:  #>         (Intr) obstim x1     #> obstime -0.467               #> x1       0.017  0.068        #> x2      -0.037  0.028 -0.079 #>  #> Standardized Within-Group Residuals: #>         Min          Q1         Med          Q3         Max  #> -3.71628471 -0.56266263 -0.06583742  0.50977566  5.17633036  #>  #> Number of Observations: 5468 #> Number of Groups: 400"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"baseline-survival","dir":"Articles","previous_headings":"Model Fitting","what":"Baseline Survival","title":"Comparison","text":"","code":"fit_cox <- coxph(   Surv(start, stop, event) ~ w1 + w2,   data = jsm_data,   x = TRUE ) summary(fit_cox) #> Call: #> coxph(formula = Surv(start, stop, event) ~ w1 + w2, data = jsm_data,  #>     x = TRUE) #>  #>   n= 5468, number of events= 294  #>  #>        coef exp(coef) se(coef)      z Pr(>|z|)     #> w1  0.31642   1.37221  0.06201  5.103 3.35e-07 *** #> w2 -0.12467   0.88279  0.05513 -2.262   0.0237 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #>    exp(coef) exp(-coef) lower .95 upper .95 #> w1    1.3722     0.7288    1.2152    1.5495 #> w2    0.8828     1.1328    0.7924    0.9835 #>  #> Concordance= 0.596  (se = 0.018 ) #> Likelihood ratio test= 31.33  on 2 df,   p=2e-07 #> Wald test            = 31.06  on 2 df,   p=2e-07 #> Score (logrank) test = 31  on 2 df,   p=2e-07"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"joint-model","dir":"Articles","previous_headings":"Model Fitting","what":"Joint Model","title":"Comparison","text":"","code":"fit_jsm <- jmodelTM(   fit_lme,   fit_cox,   data = jsm_data,   timeVarY = \"obstime\",   control = list(     delta = 1e-8,     max.iter = 500,     tol.P = 1e-04   ) ) #> Running jmodelTM(), may take some time to finish.  summary(fit_jsm) #>  #> Call: #> jmodelTM(fitLME = fit_lme, fitCOX = fit_cox, data = jsm_data,  #>     timeVarY = \"obstime\", control = list(delta = 1e-08, max.iter = 500,  #>         tol.P = 1e-04))  #>  #> Data Descriptives: #> Longitudinal Process     Survival Process #> Number of Observations: 5468 Number of Events: 294 (73.5%) #> Number of Groups: 400  #>      AIC      BIC    logLik #>  7477.29 7513.213 -3729.645 #>  #> Coefficients: #> Longitudinal Process: Linear mixed-effects model #>               Estimate     StdErr z.value   p.value     #> (Intercept) -0.0949470  0.0101934 -9.3146 < 2.2e-16 *** #> obstime      0.0968450  0.0020406 47.4581 < 2.2e-16 *** #> x1           0.2911387  0.0094537 30.7962 < 2.2e-16 *** #> x2           0.1448967  0.0090177 16.0681 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Survival Process: Proportional hazards model with unspecified baseline hazard function #>     Estimate    StdErr z.value   p.value     #> w1  0.327666  0.062444  5.2473 1.543e-07 *** #> w2 -0.149429  0.055723 -2.6817  0.007326 **  #> v   0.810758  0.157135  5.1596 2.474e-07 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Variance Components: #>             StdDev #> Random   0.1518726 #> Residual 0.3267628 #>  #> Integration: (Adaptive Gauss-Hermite Quadrature) #> quadrature points: 9  #>  #> StdErr Estimation: #> method: profile Fisher score with Richardson extrapolation #>  #> Optimization: #> convergence: success #> iterations: 6"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"time-varying-cox","dir":"Articles","previous_headings":"Model Fitting","what":"Time-Varying Cox","title":"Comparison","text":"","code":"fit_tvcox <- coxph(   Surv(start, stop, event) ~ w1 + w2 + v + cluster(ID),   data = jsm_data )  summary(fit_tvcox) #> Call: #> coxph(formula = Surv(start, stop, event) ~ w1 + w2 + v, data = jsm_data,  #>     cluster = ID) #>  #>   n= 5468, number of events= 294  #>  #>        coef exp(coef) se(coef) robust se      z Pr(>|z|)     #> w1  0.32673   1.38642  0.06235   0.06226  5.248 1.54e-07 *** #> w2 -0.15695   0.85475  0.05573   0.05411 -2.900  0.00373 **  #> v   0.62340   1.86526  0.09189   0.08631  7.222 5.11e-13 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #>    exp(coef) exp(-coef) lower .95 upper .95 #> w1    1.3864     0.7213    1.2271    1.5664 #> w2    0.8547     1.1699    0.7687    0.9504 #> v     1.8653     0.5361    1.5750    2.2091 #>  #> Concordance= 0.64  (se = 0.017 ) #> Likelihood ratio test= 77.8  on 3 df,   p=<2e-16 #> Wald test            = 83.18  on 3 df,   p=<2e-16 #> Score (logrank) test = 74.57  on 3 df,   p=4e-16,   Robust = 67.83  p=1e-14 #>  #>   (Note: the likelihood ratio and score tests assume independence of #>      observations within a cluster, the Wald and robust score tests do not)."},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"comparison","dir":"Articles","previous_headings":"","what":"Comparison","title":"Comparison","text":"Parameter Estimates (* p<0.05, ** p<0.01, *** p<0.001)","code":"# True parameter values (using defaults from JointODE::simulate) # alpha[1] = 0.3 (value effect), phi = c(0.2, -0.15) for survival covariates true_params <- data.frame(   param = c(\"Association\", \"w1\", \"w2\"),   true_value = c(0.5, 0.2, -0.15) )  # Extract and organize coefficients extract_coef <- function(jsm, tvcox) {   jsm_vcov <- sqrt(diag(jsm$Vcov))   tvcox_summ <- summary(tvcox)$coefficients    data.frame(     param = c(\"Association\", \"w1\", \"w2\"),     jsm_est = c(       jsm$coefficients$alpha,       jsm$coefficients$phi[c(\"w1\", \"w2\")]     ),     jsm_se = c(       jsm_vcov[\"alpha:v\"],       jsm_vcov[c(\"phi:w1\", \"phi:w2\")]     ),     tvc_est = coef(tvcox)[c(\"v\", \"w1\", \"w2\")],     tvc_se = tvcox_summ[c(\"v\", \"w1\", \"w2\"), \"se(coef)\"]   ) %>%     mutate(across(c(\"jsm_est\", \"jsm_se\", \"tvc_est\", \"tvc_se\"), as.numeric)) }  comp <- extract_coef(fit_jsm, fit_tvcox) %>%   left_join(true_params, by = \"param\") %>%   mutate(     diff = jsm_est - tvc_est,     diff_pct = 100 * diff / abs(tvc_est),     jsm_p = 2 * pnorm(-abs(jsm_est / jsm_se)),     tvc_p = 2 * pnorm(-abs(tvc_est / tvc_se)),     jsm_bias = jsm_est - true_value,     tvc_bias = tvc_est - true_value   )  # Summary table with significance stars format_est <- function(est, se, p) {   stars <- dplyr::case_when(     p < 0.001 ~ \"***\",     p < 0.01 ~ \"**\",     p < 0.05 ~ \"*\",     TRUE ~ \"\"   )   sprintf(\"%.3f (%.3f)%s\", est, se, stars) }  # Simple comparison table comp %>%   mutate(     Parameter = c(\"α (Association)\", \"β₁ (w1)\", \"β₂ (w2)\"),     True = sprintf(\"%.2f\", true_value),     `JSM` = format_est(jsm_est, jsm_se, jsm_p),     `TVC` = format_est(tvc_est, tvc_se, tvc_p),     `JSM Bias` = sprintf(\"%+.3f\", jsm_bias),     `TVC Bias` = sprintf(\"%+.3f\", tvc_bias)   ) %>%   select(Parameter, True, JSM, TVC, `JSM Bias`, `TVC Bias`) %>%   knitr::kable(     caption = \"Parameter Estimates (* p<0.05, ** p<0.01, *** p<0.001)\",     align = c(\"l\", rep(\"c\", 5))   ) # Combined visualization library(patchwork) library(tidyr)  # Clean forest plot forest_data <- comp %>%   pivot_longer(c(jsm_est, tvc_est), names_to = \"model\", values_to = \"est\") %>%   mutate(     se = ifelse(model == \"jsm_est\", jsm_se, tvc_se),     lower = est - 1.96 * se,     upper = est + 1.96 * se,     model = factor(model, labels = c(\"JSM\", \"TVC\")),     param_label = c(\"α\", \"β₁\", \"β₂\")[as.numeric(factor(param))],     param = factor(param, levels = c(\"Association\", \"w1\", \"w2\"))   )  p_forest <- ggplot(forest_data, aes(x = est, y = param_label, color = model)) +   geom_vline(xintercept = 0, linetype = \"dashed\", alpha = 0.3) +   geom_vline(     data = true_params %>%       mutate(param_label = c(\"α\", \"β₁\", \"β₂\")),     aes(xintercept = true_value),     color = \"darkgreen\", alpha = 0.4, size = 1   ) +   geom_errorbarh(aes(xmin = lower, xmax = upper),     position = position_dodge(0.5), height = 0.2, size = 0.8   ) +   geom_point(position = position_dodge(0.5), size = 3) +   scale_color_manual(values = c(\"JSM\" = \"#3498DB\", \"TVC\" = \"#E74C3C\")) +   theme_minimal(base_size = 11) +   theme(     legend.position = \"top\",     panel.grid.major.y = element_blank()   ) +   labs(     x = \"Estimate (95% CI)\", y = NULL, color = NULL,     title = \"Parameter Estimates\",     subtitle = \"Green line = true value\"   )  # Simple bias plot bias_data <- comp %>%   pivot_longer(c(jsm_bias, tvc_bias),     names_to = \"method\", values_to = \"bias\"   ) %>%   mutate(     method = factor(method, labels = c(\"JSM\", \"TVC\")),     param_label = c(\"α\", \"β₁\", \"β₂\")[as.numeric(factor(param))]   )  p_bias <- ggplot(bias_data, aes(x = param_label, y = bias, fill = method)) +   geom_hline(yintercept = 0, linetype = \"solid\", alpha = 0.3) +   geom_col(position = position_dodge(0.7), alpha = 0.8, width = 0.6) +   geom_text(aes(label = sprintf(\"%+.3f\", bias)),     position = position_dodge(0.7),     vjust = ifelse(bias_data$bias > 0, -0.5, 1.5),     size = 3   ) +   scale_fill_manual(values = c(\"JSM\" = \"#3498DB\", \"TVC\" = \"#E74C3C\")) +   scale_y_continuous(expand = expansion(mult = c(0.15, 0.15))) +   theme_minimal(base_size = 11) +   theme(     legend.position = \"top\",     panel.grid.major.x = element_blank()   ) +   labs(     x = \"Parameter\", y = \"Bias\", color = NULL,     title = \"Estimation Bias\",     subtitle = \"Estimate - True Value\"   )  # Combine plots p_forest / p_bias"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"model-performance","dir":"Articles","previous_headings":"","what":"Model Performance","title":"Comparison","text":"Concordance Index: Higher = Better Discrimination","code":"# Calculate C-index for model comparison library(survival)  # JSM: Combine survival predictors with longitudinal predictions jsm_risk <- -with(   jsm_data,   fit_jsm$coefficients$phi[\"w1\"] * w1 +     fit_jsm$coefficients$phi[\"w2\"] * w2 +     fit_jsm$coefficients$alpha * fitted(fit_lme) )  # Time-varying Cox: Use built-in linear predictor tvc_risk <- -predict(fit_tvcox, type = \"lp\")  # Calculate concordance for both models jsm_conc <- concordance(Surv(start, stop, event) ~ jsm_risk, data = jsm_data) tvc_conc <- concordance(Surv(start, stop, event) ~ tvc_risk, data = jsm_data)  # Create comparison cindex_comp <- data.frame(   Model = c(\"Joint Model\", \"Time-Varying Cox\"),   Cindex = c(jsm_conc$concordance, tvc_conc$concordance),   SE = sqrt(c(jsm_conc$var, tvc_conc$var)) ) %>%   mutate(     Lower = Cindex - 1.96 * SE,     Upper = Cindex + 1.96 * SE,     CI = sprintf(\"%.3f (%.3f-%.3f)\", Cindex, Lower, Upper)   )  # Display table knitr::kable(   select(cindex_comp, Model, `C-index (95% CI)` = CI),   caption = \"Concordance Index: Higher = Better Discrimination\",   align = c(\"l\", \"c\") ) #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] splines   stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] patchwork_1.3.2     tidyr_1.3.1         dplyr_1.1.4         #> [4] ggplot2_3.5.2       JSM_1.0.2           survival_3.8-3      #> [7] statmod_1.5.0       nlme_3.1-168        JointODE_0.0.0.9000 #>  #> loaded via a namespace (and not attached): #>  [1] Matrix_1.7-3       gtable_0.3.6       jsonlite_2.0.0     compiler_4.5.1     #>  [5] tidyselect_1.2.1   Rcpp_1.1.0         simsurv_1.0.0      jquerylib_0.1.4    #>  [9] systemfonts_1.2.3  scales_1.4.0       textshaping_1.0.1  yaml_2.3.10        #> [13] fastmap_1.2.0      lattice_0.22-7     R6_2.6.1           labeling_0.4.3     #> [17] generics_0.1.4     knitr_1.50         tibble_3.3.0       desc_1.4.3         #> [21] bslib_0.9.0        pillar_1.11.0      RColorBrewer_1.1-3 rlang_1.1.6        #> [25] cachem_1.1.0       deSolve_1.40       xfun_0.53          fs_1.6.6           #> [29] sass_0.4.10        cli_3.6.5          mgcv_1.9-3         withr_3.0.2        #> [33] pkgdown_2.1.3      magrittr_2.0.3     digest_0.6.37      grid_4.5.1         #> [37] lifecycle_1.0.4    vctrs_0.6.5        evaluate_1.0.5     glue_1.8.0         #> [41] farver_2.1.2       ragg_1.4.0         purrr_1.1.0        rmarkdown_2.29     #> [45] pkgconfig_2.0.3    tools_4.5.1        htmltools_0.5.8.1"},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"JointODE package implements joint modeling longitudinal biomarker trajectories survival outcomes using ordinary differential equations (ODEs). approach captures complex biomarker dynamics accounting association event times.","code":""},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started","text":"","code":"# Install from GitHub devtools::install_github(\"ziyangg98/JointODE\")  # Load the package library(JointODE)"},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"data-preparation","dir":"Articles","previous_headings":"Quick Start","what":"Data Preparation","title":"Getting Started","text":"package requires two data frames: Longitudinal data: Repeated biomarker measurements Survival data: Time--event outcomes","code":"# Example longitudinal data structure # id: subject identifier # time: measurement time # v: biomarker value head(longitudinal_data)  # Example survival data structure # id: subject identifier # time: observation time # status: event indicator (1=event, 0=censored) # w1, w2: baseline covariates head(survival_data)"},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"model-fitting","dir":"Articles","previous_headings":"Quick Start","what":"Model Fitting","title":"Getting Started","text":"","code":"# Fit joint ODE model fit <- JointODE(   longitudinal_data = longitudinal_data,   survival_data = survival_data,   longitudinal_formula = v ~ 1,   survival_formula = Surv(time, status) ~ w1 + w2,   id = \"id\",   time = \"time\" )  # View results summary(fit)"},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"model-diagnostics","dir":"Articles","previous_headings":"Quick Start","what":"Model Diagnostics","title":"Getting Started","text":"","code":"# Check convergence plot(fit, type = \"convergence\")  # Residual diagnostics plot(fit, type = \"residuals\")  # Fitted trajectories plot(fit, type = \"trajectories\", subjects = 1:6)"},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started","text":"See vignette(\"technical-details\") mathematical formulation See vignette(\"data-simulation\") generating synthetic data Check ?JointODE detailed function documentation","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"longitudinal-sub-model","dir":"Articles","previous_headings":"Model Framework","what":"Longitudinal Sub-Model","title":"Technical Details","text":"observed biomarker measurements modeled : V_{ij}=m_i(T_{ij})+b_i+\\varepsilon_{ij},\\quad =1,\\ldots,n,\\quad j=1,\\ldots,n_i : V_{ij}: Observed biomarker value subject time T_{ij} m_i(t): True underlying biomarker trajectory b_i\\sim\\mathcal{N}(0,\\sigma_{b}^{2}): Subject-specific random intercept \\varepsilon_{ij}\\sim\\mathcal{N}(0,\\sigma_{e}^{2}): Measurement error biomarker trajectory evolution characterized following second-order differential equation: \\ddot{m}_i(t) = f\\big(m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t), t\\big) f: \\mathbb{R} \\times \\mathbb{R} \\times \\mathbb{R}^p \\times \\mathbb{R}^+ \\\\mathbb{R} smooth function modeling biomarker acceleration function current value m_i(t), velocity \\dot{m}_i(t), time-varying covariates \\mathbf{X}_i(t) \\\\mathbb{R}^p, time t.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"survival-sub-model","dir":"Articles","previous_headings":"Model Framework","what":"Survival Sub-Model","title":"Technical Details","text":"hazard function incorporates biomarker dynamics: \\lambda_i(t) = \\lambda_{0}(t)\\exp\\left[\\mathbf{W}_i^{\\top}\\boldsymbol{\\phi}+\\mathbf{m}_i(t)^{\\top}\\boldsymbol{\\alpha}+b_{}\\right] : \\lambda_{0}(t): Baseline hazard (e.g., Weibull, piecewise constant) \\mathbf{m}_i(t)=\\left(m_i(t), \\dot{m}_i(t), \\ddot{m}_i(t)\\right)^{\\top}: Biomarker value derivatives \\boldsymbol{\\alpha}=(\\alpha_0, \\alpha_1, \\alpha_2)^{\\top}: Association parameters value, velocity, acceleration \\mathbf{W}_i: Baseline covariates coefficients \\boldsymbol{\\phi} b_i: Subject-specific random intercept","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"ode-system","dir":"Articles","previous_headings":"Model Framework","what":"ODE System","title":"Technical Details","text":"complete system couples biomarker trajectory dynamics survival process. state vector \\mathbf{s}_i(t) = (\\Lambda_i(t), m_i(t), \\dot{m}_i(t))^{\\top} evolves according : \\frac{d\\mathbf{s}_i}{dt} = \\begin{pmatrix} \\lambda_i(t|b_i) \\\\ \\dot{m}_i(t) \\\\ f(m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t), t) \\end{pmatrix} initial conditions \\mathbf{s}_i(0) = (0, m_{i0}, \\dot{m}_{i0})^{\\top}, m_{i0} \\dot{m}_{i0} initial biomarker value velocity subject .","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"statistical-inference","dir":"Articles","previous_headings":"","what":"Statistical Inference","title":"Technical Details","text":"parameter estimation, need specify parametric forms model components.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"model-parameterization","dir":"Articles","previous_headings":"Statistical Inference","what":"Model Parameterization","title":"Technical Details","text":"Hazard Function: parameterize log baseline hazard using B-splines: \\log\\lambda_0(t) = \\boldsymbol{\\eta}^{\\top} \\mathbf{B}^{(\\lambda)}(t) Thus, full hazard function becomes: \\lambda_i(t|b_i) = \\exp\\left[\\boldsymbol{\\eta}^{\\top} \\mathbf{B}^{(\\lambda)}(t) + \\mathbf{W}_i^{\\top}\\boldsymbol{\\phi} + \\mathbf{m}_i(t)^{\\top}\\boldsymbol{\\alpha} + b_{}\\right] \\mathbf{B}^{(\\lambda)}(t) B-spline basis log baseline hazard, \\boldsymbol{\\eta} corresponding coefficients. Acceleration Function: make model tractable, approximate unknown acceleration function f using single-index model: f(m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t), t) \\approx g(\\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t)) : \\mathbf{Z}_i(t) = [m_i(t), \\dot{m}_i(t), \\mathbf{X}_i^{\\top}(t), t]^{\\top} feature vector \\boldsymbol{\\beta} single-index coefficients (constrained: \\|\\boldsymbol{\\beta}\\| = 1) g(u) = \\boldsymbol{\\gamma}^{\\top} \\mathbf{B}_g(u) flexible function parameterized B-spline basis \\mathbf{B}_g(u) coefficients \\boldsymbol{\\gamma}","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"likelihood","dir":"Articles","previous_headings":"Statistical Inference","what":"Likelihood","title":"Technical Details","text":"joint likelihood subject integrates random effect: L_i(\\boldsymbol{\\psi}) = \\int p(\\mathbf{V}_i | b_i) \\cdot p(T_i, \\delta_i | b_i) \\cdot p(b_i) \\, db_i \\boldsymbol{\\psi} = (\\boldsymbol{\\theta}, \\boldsymbol{\\beta}), \\boldsymbol{\\theta} = (\\boldsymbol{\\eta}, \\boldsymbol{\\phi}, \\boldsymbol{\\alpha}, \\boldsymbol{\\gamma}, \\sigma_e^2, \\sigma_b^2). Likelihood Components: Longitudinal: p(\\mathbf{V}_i | b_i) = \\prod_{j=1}^{n_i} \\mathcal{N}(V_{ij}; m_i(T_{ij}) + b_i, \\sigma_e^2) Survival: p(T_i, \\delta_i | b_i) = [\\lambda_i(T_i|b_i)]^{\\delta_i} \\exp[-\\Lambda_i(T_i|b_i)] Random Effect: p(b_i) \\sim \\mathcal{N}(0, \\sigma_b^2)","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"em-algorithm","dir":"Articles","previous_headings":"Statistical Inference","what":"EM Algorithm","title":"Technical Details","text":"use Expectation-Maximization (EM) algorithm parameter estimation.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"e-step-posterior-computation","dir":"Articles","previous_headings":"Statistical Inference > EM Algorithm","what":"E-Step: Posterior Computation","title":"Technical Details","text":"subject , compute posterior distribution b_i given observed data \\mathcal{O}_i. Key simplification: hazard cumulative hazard factor : \\lambda_i(t|b_i) = e^{b_i} \\lambda_i(t|0) \\Lambda_i(t|b_i) = e^{b_i} \\Lambda_i(t|0) Implementation: Solve baseline ODE b_i = 0 obtain m_i(t), \\lambda_i(t|0), \\Lambda_i(T_i|0) Find posterior mode \\tilde{b}_i maximizing: \\ell_i(b) = b\\left[\\frac{S_i}{\\sigma_e^2} + \\delta_i\\right] - \\frac{b^2}{2}\\left[\\frac{n_i}{\\sigma_e^2} + \\frac{1}{\\sigma_b^2}\\right] - e^b\\Lambda_i(T_i|0) S_i = \\sum_j(V_{ij} - m_i(T_{ij})) Mean: \\hat{b}_i = E[b_i|\\mathcal{O}_i] Variance: \\hat{v}_i = \\text{Var}[b_i|\\mathcal{O}_i] Transform: E[e^{b_i}|\\mathcal{O}_i] survival updates","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"m-step-parameter-updates","dir":"Articles","previous_headings":"Statistical Inference > EM Algorithm","what":"M-Step: Parameter Updates","title":"Technical Details","text":"Maximize expected complete-data log-likelihood: Q(\\boldsymbol{\\psi}) = Q_{\\text{long}} + Q_{\\text{surv}} + Q_{\\text{RE}} : Q_{\\text{long}} = -\\frac{1}{2\\sigma_e^2}\\sum_{,j} [(V_{ij} - m_i(T_{ij}) - \\hat{b}_i)^2 + \\hat{v}_i] - \\frac{N}{2}\\log(2\\pi\\sigma_e^2), N = \\sum_{=1}^n n_i total number observations Q_{\\text{surv}} = \\sum_i [\\delta_i(\\log\\lambda_i(T_i|0) + \\hat{b}_i) - E[e^{b_i}|\\mathcal{O}_i]\\Lambda_i(T_i|0)] Q_{\\text{RE}} = -\\frac{1}{2\\sigma_b^2}\\sum_i (\\hat{b}_i^2 + \\hat{v}_i) - \\frac{n}{2}\\log(2\\pi\\sigma_b^2) Optimization Strategy: Update \\boldsymbol{\\beta}: \\hat{\\boldsymbol{\\beta}} = \\arg\\max_{\\boldsymbol{\\beta}:\\|\\boldsymbol{\\beta}\\|=1} Q(\\boldsymbol{\\beta};\\widehat{\\boldsymbol{\\theta}}) Update \\boldsymbol{\\theta}: \\hat{\\boldsymbol{\\theta}} = \\arg\\max_{\\boldsymbol{\\theta}} Q(\\boldsymbol{\\theta};\\widehat{\\boldsymbol{\\beta}}) Update \\boldsymbol{\\sigma}:  \\sigma_e^2 = \\frac{1}{N}\\sum_{,j}[(V_{ij} - m_i(T_{ij}) - \\hat{b}_i)^2 + \\hat{v}_i],\\quad\\sigma_b^2 = \\frac{1}{n}\\sum_i(\\hat{b}_i^2 + \\hat{v}_i)","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"overview-of-gradient-computation","dir":"Articles","previous_headings":"Computational Details","what":"Overview of Gradient Computation","title":"Technical Details","text":"M-step EM algorithm requires maximization expected complete-data log-likelihood Q(\\boldsymbol{\\psi}) respect parameter vector \\boldsymbol{\\psi} = (\\boldsymbol{\\theta}, \\boldsymbol{\\beta}), \\boldsymbol{\\theta} encompasses hazard model parameters \\boldsymbol{\\beta} represents single-index coefficients. perform optimization efficiently, gradient-based methods necessitate computation : \\nabla_{\\boldsymbol{\\psi}} Q = \\sum_{=1}^{n}\\sum_{j=1}^{n_i} \\frac{r_{ij}}{\\sigma_e^2} \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\psi}} + \\sum_{=1}^{n} \\left[\\delta_i \\frac{\\partial \\log\\lambda_i(T_i|0)}{\\partial \\boldsymbol{\\psi}} - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial \\Lambda_i(T_i|0)}{\\partial \\boldsymbol{\\psi}}\\right] r_{ij} = V_{ij} - m_i(T_{ij}) - \\hat{b}_i denotes residual observed fitted longitudinal values. gradient formula reveals fundamental computational challenge: must evaluate sensitivities biomarker trajectory m_i(t) hazard functions respect model parameters. Specifically, require: \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\psi}}: trajectory sensitivities observation times \\frac{\\partial \\log\\lambda_i(T_i|0)}{\\partial \\boldsymbol{\\psi}}: log hazard sensitivities event times \\frac{\\partial \\Lambda_i(T_i|0)}{\\partial \\boldsymbol{\\psi}}: cumulative hazard sensitivities event times sensitivities depend solution nonlinear second-order ODE system derived closed form. first present explicit forms gradients, discuss numerical methods computation.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"explicit-forms-of-gradient-components","dir":"Articles","previous_headings":"Computational Details","what":"Explicit Forms of Gradient Components","title":"Technical Details","text":"parameter vector \\boldsymbol{\\psi} = (\\boldsymbol{\\theta}, \\boldsymbol{\\beta}) consists hazard model parameters \\boldsymbol{\\theta} = (\\boldsymbol{\\eta}, \\boldsymbol{\\phi}, \\boldsymbol{\\alpha}, \\boldsymbol{\\gamma}) single-index coefficients \\boldsymbol{\\beta}. derive gradient respect component.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"gradients-with-respect-to-boldsymboltheta","dir":"Articles","previous_headings":"Computational Details > Explicit Forms of Gradient Components","what":"Gradients with Respect to \\boldsymbol{\\theta}","title":"Technical Details","text":"gradient components respect \\boldsymbol{\\theta} = (\\boldsymbol{\\eta}, \\boldsymbol{\\phi}, \\boldsymbol{\\alpha}, \\boldsymbol{\\gamma}) decompose follows: Baseline hazard coefficients (\\boldsymbol{\\eta}): \\nabla_{\\boldsymbol{\\eta}} Q = \\sum_{=1}^{n} \\left[\\delta_i \\mathbf{B}^{(\\lambda)}(T_i) - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\eta}}\\right] Baseline covariate effects (\\boldsymbol{\\phi}): \\nabla_{\\boldsymbol{\\phi}} Q = \\sum_{=1}^{n} \\left[\\delta_i - E[e^{b_i}|\\mathcal{O}_i] \\cdot \\Lambda_i(T_i|0)\\right] \\mathbf{W}_i Association parameters (\\boldsymbol{\\alpha}): \\nabla_{\\boldsymbol{\\alpha}} Q = \\sum_{=1}^{n} \\left[\\delta_i \\mathbf{m}_i(T_i) - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\alpha}}\\right] Acceleration spline coefficients (\\boldsymbol{\\gamma}): \\nabla_{\\boldsymbol{\\gamma}} Q = \\sum_{=1}^{n}\\sum_{j=1}^{n_i} \\frac{r_{ij}}{\\sigma_e^2} \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\gamma}} + \\sum_{=1}^{n} \\left[\\delta_i \\boldsymbol{\\alpha}^{\\top} \\frac{\\partial \\mathbf{m}_i(T_i)}{\\partial \\boldsymbol{\\gamma}} - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial \\Lambda_i(T_i|0)}{\\partial \\boldsymbol{\\gamma}}\\right]","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"gradient-with-respect-to-single-index-coefficients-boldsymbolbeta","dir":"Articles","previous_headings":"Computational Details > Explicit Forms of Gradient Components","what":"Gradient with Respect to Single-Index Coefficients \\boldsymbol{\\beta}","title":"Technical Details","text":"gradient respect constrained single-index coefficients (\\|\\boldsymbol{\\beta}\\|=1) : \\nabla_{\\boldsymbol{\\beta}} Q = \\sum_{=1}^{n}\\sum_{j=1}^{n_i} \\frac{r_{ij}}{\\sigma_e^2} \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\beta}} + \\sum_{=1}^{n} \\left[\\delta_i \\boldsymbol{\\alpha}^{\\top} \\frac{\\partial \\mathbf{m}_i(T_i)}{\\partial \\boldsymbol{\\beta}} - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial \\Lambda_i(T_i|0)}{\\partial \\boldsymbol{\\beta}}\\right] r_{ij} = V_{ij} - m_i(T_{ij}) - \\hat{b}_i denotes residual observed fitted values.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"computing-the-required-sensitivities","dir":"Articles","previous_headings":"Computational Details","what":"Computing the Required Sensitivities","title":"Technical Details","text":"gradient expressions involve two types sensitivities must computed numerically:","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"cumulative-hazard-sensitivities","dir":"Articles","previous_headings":"Computational Details > Computing the Required Sensitivities","what":"Cumulative Hazard Sensitivities","title":"Technical Details","text":"cumulative hazard function \\Lambda_i(T_i|0) depends parameters instantaneous hazard. parameters affecting hazard directly, sensitivities computed : \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\eta}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\mathbf{B}^{(\\lambda)}(t)\\,\\mathrm{d}t,\\quad \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\alpha}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\mathbf{m}_i(t)\\,\\mathrm{d}t,\\quad \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\phi}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\mathbf{W}_i\\,\\mathrm{d}t parameters affecting trajectory m_i(t), chain rule yields: \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\gamma}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\boldsymbol{\\alpha}^{\\top}\\frac{\\partial\\mathbf{m}_i(t)}{\\partial\\boldsymbol{\\gamma}}\\,\\mathrm{d}t,\\quad\\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\beta}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\boldsymbol{\\alpha}^{\\top}\\frac{\\partial\\mathbf{m}_i(t)}{\\partial\\boldsymbol{\\beta}}\\,\\mathrm{d}t","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"trajectory-sensitivities","dir":"Articles","previous_headings":"Computational Details > Computing the Required Sensitivities > Cumulative Hazard Sensitivities","what":"Trajectory Sensitivities","title":"Technical Details","text":"trajectory sensitivities respect parameters affecting ODE system complex must computed numerically. sensitivities satisfy following relationships: single-index coefficients (\\boldsymbol{\\beta}): trajectory sensitivities evolve according : \\frac{\\partial m_i(t)}{\\partial \\boldsymbol{\\beta}} = \\int_{0}^{t} \\frac{\\partial\\dot{m}_i(s)}{\\partial \\boldsymbol{\\beta}} \\,\\mathrm{d}s,\\quad \\frac{\\partial\\dot{m}_i(t)}{\\partial \\boldsymbol{\\beta}} = \\int_{0}^{t} \\frac{\\partial \\ddot{m}_i(s)}{\\partial \\boldsymbol{\\beta}} \\,\\mathrm{d}s acceleration sensitivity given : \\frac{\\partial \\ddot{m}_i(t)}{\\partial \\boldsymbol{\\beta}} = \\boldsymbol{\\gamma}^{\\top}\\mathbf{B}'_g(u) \\frac{\\partial u}{\\partial\\boldsymbol{\\beta}} , u = \\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t) denotes single-index value \\mathbf{Z}_i(t) = [m_i(t), \\dot{m}_i(t), \\mathbf{X}_i^{\\top}(t), t]^{\\top} feature vector. derivative \\mathbf{B}'_g(u) = \\frac{d\\mathbf{B}_g(u)}{du} represents derivative B-spline basis. sensitivity index : \\frac{\\partial u}{\\partial\\boldsymbol{\\beta}} = \\mathbf{Z}_i(t) + \\boldsymbol{\\beta}^{\\top} \\frac{\\partial \\mathbf{Z}_i(t)}{\\partial\\boldsymbol{\\beta}} \\frac{\\partial \\mathbf{Z}_i(t)}{\\partial\\boldsymbol{\\beta}} = \\begin{bmatrix} \\frac{\\partial m_i(t)}{\\partial \\boldsymbol{\\beta}} \\\\ \\frac{\\partial \\dot{m}_i(t)}{\\partial \\boldsymbol{\\beta}} \\\\ \\mathbf{0} \\\\ 0 \\end{bmatrix} since covariates \\mathbf{X}_i(t) time t depend \\boldsymbol{\\beta}. acceleration spline coefficients (\\boldsymbol{\\gamma}): \\frac{\\partial m_i(t)}{\\partial \\boldsymbol{\\gamma}} = \\int_{0}^{t} \\frac{\\partial\\dot{m}_i(s)}{\\partial \\boldsymbol{\\gamma}} \\,\\mathrm{d}s,\\quad \\frac{\\partial\\dot{m}_i(t)}{\\partial \\boldsymbol{\\gamma}} = \\int_{0}^{t} \\frac{\\partial \\ddot{m}_i(s)}{\\partial \\boldsymbol{\\gamma}} \\,\\mathrm{d}s acceleration sensitivity : \\frac{\\partial \\ddot{m}_i(t)}{\\partial \\boldsymbol{\\gamma}} = \\mathbf{B}_g(u) + \\boldsymbol{\\gamma}^{\\top}\\mathbf{B}'_g(u) \\frac{\\partial u}{\\partial \\boldsymbol{\\gamma}} expression reveals two distinct contributions: - Direct effect: \\mathbf{B}_g(u) captures explicit linear dependence acceleration function \\boldsymbol{\\gamma} - Indirect effect: \\boldsymbol{\\gamma}^{\\top}\\mathbf{B}'_g(u) \\frac{\\partial u}{\\partial \\boldsymbol{\\gamma}} accounts implicit dependence feedback trajectory states index sensitivity : \\frac{\\partial u}{\\partial \\boldsymbol{\\gamma}} = \\boldsymbol{\\beta}^{\\top} \\frac{\\partial \\mathbf{Z}_i(t)}{\\partial \\boldsymbol{\\gamma}} = \\boldsymbol{\\beta}^{\\top} \\begin{bmatrix} \\frac{\\partial m_i(t)}{\\partial \\boldsymbol{\\gamma}} \\\\ \\frac{\\partial \\dot{m}_i(t)}{\\partial \\boldsymbol{\\gamma}} \\\\ \\mathbf{0} \\\\ 0 \\end{bmatrix}","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"numerical-methods-for-sensitivity-computation","dir":"Articles","previous_headings":"Computational Details","what":"Numerical Methods for Sensitivity Computation","title":"Technical Details","text":"Since sensitivities obtained analytically due nonlinear nature acceleration function g(\\cdot), employ numerical methods. Two computational strategies available: Forward Sensitivity Method: Augments original ODE system sensitivity equations integrated simultaneously state equations Adjoint Method: Solves backward--time adjoint system, offering computational advantages number parameters exceeds number objective function evaluations","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"forward-sensitivity-method","dir":"Articles","previous_headings":"Computational Details > Numerical Methods for Sensitivity Computation","what":"Forward Sensitivity Method","title":"Technical Details","text":"forward method extends original three-dimensional state space include sensitivity trajectories, solving augmented ODE systems simultaneously evolve primary state variables parameter sensitivities. Augmented system \\boldsymbol{\\theta} components: \\frac{d}{dt}\\begin{bmatrix} \\Lambda_i \\\\ m_i \\\\ \\dot{m}_i \\\\ \\partial\\Lambda_{\\eta,} \\\\ \\partial\\Lambda_{\\alpha,} \\\\ \\partial m_{,\\gamma} \\\\ \\partial\\dot{m}_{,\\gamma} \\\\ \\partial\\Lambda_{\\gamma,} \\end{bmatrix} = \\begin{bmatrix} \\lambda_i(t|0) \\\\ \\dot{m}_i(t) \\\\ g(\\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t))  \\\\ \\mathbf{B}^{(\\lambda)}(t) \\lambda_i(t|0) \\\\ \\mathbf{m}_i(t) \\lambda_i(t|0) \\\\ \\partial\\dot{m}_{,\\gamma} \\\\ \\mathbf{B}_g(u) + \\boldsymbol{\\gamma}^{\\top}\\mathbf{B}'_g(u) \\cdot \\frac{\\partial u}{\\partial \\boldsymbol{\\gamma}} \\\\ \\boldsymbol{\\alpha}^{\\top}\\frac{\\partial\\mathbf{m}_i(t)}{\\partial\\boldsymbol{\\gamma}} \\lambda_i(t|0) \\end{bmatrix} Augmented system \\boldsymbol{\\beta} sensitivities: \\frac{d}{dt}\\begin{bmatrix} \\Lambda_i \\\\ m_i \\\\ \\dot{m}_i \\\\ \\partial m_{,\\beta} \\\\ \\partial\\dot{m}_{,\\beta} \\\\ \\partial\\Lambda_{\\beta,} \\end{bmatrix} = \\begin{bmatrix} \\lambda_i(t|0) \\\\ \\dot{m}_i(t) \\\\ g(\\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t)) \\\\ \\partial \\dot{m}_{,\\beta} \\\\ \\boldsymbol{\\gamma}^{\\top}\\mathbf{B}'_g(u) \\cdot \\frac{\\partial u}{\\partial\\boldsymbol{\\beta}} \\\\ \\boldsymbol{\\alpha}^{\\top}\\frac{\\partial\\mathbf{m}_i(t)}{\\partial\\boldsymbol{\\beta}} \\cdot \\lambda_i(t|0) \\end{bmatrix} , \\partial\\Lambda_{\\eta,}, \\partial\\Lambda_{\\alpha,}, \\partial\\Lambda_{\\gamma,}, \\partial\\Lambda_{\\beta,} denote cumulative hazard sensitivities respect corresponding parameter groups, \\frac{\\partial u}{\\partial\\boldsymbol{\\beta}} follows recursive relationship defined previously. augmented systems must integrated t=0 t=T_i subject obtain complete sensitivity information required gradient computation.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"adjoint-method","dir":"Articles","previous_headings":"Computational Details > Numerical Methods for Sensitivity Computation","what":"Adjoint Method","title":"Technical Details","text":"adjoint method provides alternative, memory-efficient approach computing gradients, particularly advantageous number parameters substantially exceeds number objective function components. Instead propagating sensitivities forward time, method solves backward--time adjoint system. Mathematical Foundation Given ODE system \\frac{d\\mathbf{s}}{dt} = F(t, \\mathbf{s}; \\boldsymbol{\\psi}) \\mathbf{s}(0) = \\mathbf{s}_0, derive adjoint sensitivity formula. Since \\mathbf{s}(t) satisfies ODE, function \\boldsymbol{\\kappa}(t): \\mathbf{s}(T) = \\mathbf{s}(T) - \\int_0^T \\boldsymbol{\\kappa}^{\\top} \\left[\\frac{d\\mathbf{s}}{dt} - F\\right] dt Differentiating respect \\boldsymbol{\\psi} using integration parts: \\frac{\\partial \\mathbf{s}(T)}{\\partial \\boldsymbol{\\psi}} = \\int_0^T \\boldsymbol{\\kappa}^{\\top} \\frac{\\partial F}{\\partial \\boldsymbol{\\psi}} dt - \\boldsymbol{\\kappa}(T)^{\\top} \\frac{\\partial \\mathbf{s}(T)}{\\partial \\boldsymbol{\\psi}} + \\int_0^T \\left[\\frac{d\\boldsymbol{\\kappa}}{dt} + \\left(\\frac{\\partial F}{\\partial \\mathbf{s}}\\right)^{\\top} \\boldsymbol{\\kappa}\\right]^{\\top} \\frac{\\partial \\mathbf{s}}{\\partial \\boldsymbol{\\psi}} dt Define \\tilde{\\boldsymbol{\\kappa}} = \\boldsymbol{\\kappa} + \\mathbf{e}_k choose satisfy: \\frac{d\\tilde{\\boldsymbol{\\kappa}}}{dt} = -\\left(\\frac{\\partial F}{\\partial \\mathbf{s}}\\right)^{\\top} \\tilde{\\boldsymbol{\\kappa}}, \\quad \\tilde{\\boldsymbol{\\kappa}}(T) = \\mathbf{e}_k choice eliminates \\frac{\\partial \\mathbf{s}}{\\partial \\boldsymbol{\\psi}} terms, yielding: \\frac{\\partial \\mathbf{s}_k(T)}{\\partial \\boldsymbol{\\psi}} = \\int_0^T \\tilde{\\boldsymbol{\\kappa}}^{\\top} \\frac{\\partial F}{\\partial \\boldsymbol{\\psi}}\\bigg|_{\\mathbf{s}} dt \\mathbf{e}_k k-th unit vector (.e., vector 1 k-th position 0 elsewhere). Application JointODE state vector \\mathbf{s} = [\\Lambda_i, m_i, \\dot{m}_i]^{\\top}, need: 1. \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\psi}} observation time T_{ij} 2. \\frac{\\partial \\Lambda_i(T_i)}{\\partial \\boldsymbol{\\psi}} event time T_i","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"adjoint-system","dir":"Articles","previous_headings":"Computational Details > Numerical Methods for Sensitivity Computation > Adjoint Method","what":"Adjoint System","title":"Technical Details","text":"transposed Jacobian JointODE dynamics : \\left(\\frac{\\partial F}{\\partial \\mathbf{s}}\\right)^{\\top} = \\begin{bmatrix} 0 & 0 & 0 \\\\ \\alpha_0 \\lambda_i(t|0) & 0 & g'(u) \\beta_1 \\\\ \\alpha_1 \\lambda_i(t|0) & 1 & g'(u) \\beta_2 \\end{bmatrix} g'(u) = \\boldsymbol{\\gamma}^{\\top}\\mathbf{B}'_g(u) denotes derivative acceleration function u = \\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t), \\beta_1 \\beta_2 first two components single-index coefficient vector \\boldsymbol{\\beta} corresponding m_i(t) \\dot{m}_i(t), respectively. yields adjoint differential equations (solved backward time): \\begin{aligned} \\frac{d\\tilde{\\kappa}_1}{dt} &= 0 \\\\ \\frac{d\\tilde{\\kappa}_2}{dt} &= -\\alpha_0 \\lambda_i(t|0) \\tilde{\\kappa}_1 - \\tilde{\\kappa}_3 \\\\ \\frac{d\\tilde{\\kappa}_3}{dt} &= -\\alpha_1 \\lambda_i(t|0) \\tilde{\\kappa}_1 - g'(u) \\beta_1 \\tilde{\\kappa}_2 - g'(u) \\beta_2 \\tilde{\\kappa}_3 \\end{aligned} terminal conditions: m_i(T_{ij}) sensitivity: \\tilde{\\boldsymbol{\\kappa}}(T_{ij}) = [0, 1, 0]^{\\top} \\Lambda_i(T_i) sensitivity: \\tilde{\\boldsymbol{\\kappa}}(T_i) = [1, 0, 0]^{\\top}","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"parameter-derivatives","dir":"Articles","previous_headings":"Computational Details > Numerical Methods for Sensitivity Computation > Adjoint Method","what":"Parameter Derivatives","title":"Technical Details","text":"partial derivatives \\frac{\\partial F}{\\partial \\boldsymbol{\\psi}}\\bigg|_{\\mathbf{s}} needed sensitivity integrals: Trajectory parameters: Single-index coefficients: \\frac{\\partial F}{\\partial \\boldsymbol{\\beta}} = [0, 0, g'(u) \\mathbf{Z}_i(t)]^{\\top} Acceleration basis coefficients: \\frac{\\partial F}{\\partial \\boldsymbol{\\gamma}} = [0, 0, \\mathbf{B}_g(u)]^{\\top} Survival parameters: Baseline hazard coefficients: \\frac{\\partial F}{\\partial \\boldsymbol{\\eta}} = [\\mathbf{B}^{(\\lambda)}(t) \\lambda_i(t|0), 0, 0]^{\\top} Association parameters: \\frac{\\partial F}{\\partial \\boldsymbol{\\alpha}} = [\\mathbf{m}_i(t) \\lambda_i(t|0), 0, 0]^{\\top} Baseline covariate effects: \\frac{\\partial F}{\\partial \\boldsymbol{\\phi}} = [\\mathbf{W}_i \\lambda_i(t|0), 0, 0]^{\\top}","code":""},{"path":"http://gongziyang.com/JointODE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ziyang Gong. Author, maintainer.","code":""},{"path":"http://gongziyang.com/JointODE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gong Z (2025). JointODE: Joint Modeling Longitudinal Survival Data Using ODEs. R package version 0.0.0.9000, https://github.com/ziyangg98/JointODE.","code":"@Manual{,   title = {JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs},   author = {Ziyang Gong},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/ziyangg98/JointODE}, }"},{"path":"http://gongziyang.com/JointODE/index.html","id":"jointode","dir":"","previous_headings":"","what":"Joint Modeling of Longitudinal and Survival Data Using ODEs","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"JointODE package provides unified framework joint modeling longitudinal biomarker measurements time--event outcomes using ordinary differential equations (ODEs). approach enables simultaneous analysis biomarker trajectories impact survival outcomes.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/index.html","id":"longitudinal-model","dir":"","previous_headings":"Model Setup","what":"Longitudinal Model","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"observed biomarker measurements modeled : V_{ij}=m_i(T_{ij})+b_i+\\varepsilon_{ij},\\quad =1,\\ldots,n,\\quad j=1,\\ldots,n_i : V_{ij}: Observed biomarker value subject time T_{ij} m_i(t): True underlying biomarker trajectory b_i\\sim\\mathcal{N}(0,\\sigma_{b}^{2}): Subject-specific random intercept \\varepsilon_{ij}\\sim\\mathcal{N}(0,\\sigma_{e}^{2}): Measurement error biomarker trajectory evolution characterized following second-order differential equation: \\ddot{m}_i(t) = f\\big(m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t), t\\big) f: \\mathbb{R} \\times \\mathbb{R} \\times \\mathbb{R}^p \\times \\mathbb{R}^+ \\\\mathbb{R} smooth function modeling biomarker acceleration function current value m_i(t), velocity \\dot{m}_i(t), time-varying covariates \\mathbf{X}_i(t) \\\\mathbb{R}^p, time t.","code":""},{"path":"http://gongziyang.com/JointODE/index.html","id":"survival-model","dir":"","previous_headings":"Model Setup","what":"Survival Model","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"hazard function incorporates biomarker dynamics: \\lambda_i(t) = \\lambda_{0}(t)\\exp\\left[\\mathbf{m}_i(t)^{\\top}\\boldsymbol{\\alpha}+\\mathbf{W}_i^{\\top}\\boldsymbol{\\phi}+b_{}\\right] : \\lambda_{0}(t): Baseline hazard (e.g., Weibull, piecewise constant) \\mathbf{m}_i(t)=\\left(m_i(t), \\dot{m}_i(t), \\ddot{m}_i(t)\\right)^{\\top}: Biomarker value derivatives \\boldsymbol{\\alpha}=(\\alpha_0, \\alpha_1, \\alpha_2)^{\\top}: Association parameters value, velocity, acceleration \\mathbf{W}_i: Baseline covariates coefficients \\boldsymbol{\\phi} b_i: Subject-specific random intercept detailed mathematical derivations including ODE formulation, likelihood construction, EM algorithm specifics, see technical documentation.","code":""},{"path":"http://gongziyang.com/JointODE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"can install development version JointODE GitHub :","code":"# install.packages(\"pak\") pak::pak(\"ziyangg98/JointODE\")"},{"path":"http://gongziyang.com/JointODE/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"’s basic example demonstrating typical usage: Using README.Rmd instead README.md allows include executable R chunks: Remember render README.Rmd regularly keep README.md --date. Use devtools::build_readme() task. can also embed plots:  Remember commit push resulting figure files ensure display GitHub CRAN.","code":"library(JointODE) ## basic example code summary(cars) #>      speed           dist #>  Min.   : 4.0   Min.   :  2.00 #>  1st Qu.:12.0   1st Qu.: 26.00 #>  Median :15.0   Median : 36.00 #>  Mean   :15.4   Mean   : 42.98 #>  3rd Qu.:19.0   3rd Qu.: 56.00 #>  Max.   :25.0   Max.   :120.00"},{"path":"http://gongziyang.com/JointODE/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"Please note JointODE project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","title":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","text":"Implements joint modeling longitudinal biomarker trajectories time--event outcomes using ordinary differential equations (ODEs). package provides tools simultaneous analysis biomarker dynamics survival data, capturing complex temporal patterns ODE-based trajectory modeling accounting association event times shared random effects.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/reference/JointODE-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","text":"Maintainer: Ziyang Gong meetziyang@gmail.com","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Joint Model for Longitudinal and Survival Data Using ODEs — JointODE","title":"Fit Joint Model for Longitudinal and Survival Data Using ODEs — JointODE","text":"Fits joint model simultaneously analyzes longitudinal biomarker trajectories time--event outcomes using ordinary differential equations (ODEs). approach captures complex temporal dynamics biomarker evolution quantifying association survival shared parameters.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Joint Model for Longitudinal and Survival Data Using ODEs — JointODE","text":"","code":"JointODE(   longitudinal_formula,   longitudinal_data,   survival_formula,   survival_data,   id = \"id\",   time = \"time\",   spline_baseline = list(degree = 3, n_knots = 5, knot_placement = \"quantile\",     boundary_knots = NULL),   spline_index = list(degree = 3, n_knots = 4, knot_placement = \"quantile\",     boundary_knots = NULL),   control = list(),   ... )"},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Joint Model for Longitudinal and Survival Data Using ODEs — JointODE","text":"longitudinal_formula Formula longitudinal submodel. Left side specifies response; right side includes time covariates (e.g., v ~ x1). longitudinal_data Data frame containing longitudinal measurements. Must include multiple observations per subject columns subject ID, measurement times, response values. survival_formula Formula survival submodel. Must use Surv(time, status) left side; right side specifies baseline covariates. survival_data Data frame containing survival/event data. Must exactly one row per subject event time status. id Character string naming subject ID variable. Must exist datasets (default: \"id\"). time Character string naming time variable longitudinal data (default: \"time\"). spline_baseline List B-spline configuration baseline hazard: degree Degree B-spline basis (default: 3) n_knots Number interior knots (default: 5) knot_placement Method knot placement: \"quantile\" (based event times) \"equal\" (default: \"quantile\") boundary_knots Boundary knots, NULL uses event range (default: NULL) spline_index List B-spline configuration single index model: degree Degree B-spline basis (default: 3) n_knots Number interior knots (default: 4) knot_placement Method knot placement: \"quantile\" (based index values) \"equal\" (default: \"quantile\") boundary_knots Boundary knots, NULL uses index range (default: NULL) control List optimization control parameters: method Optimization algorithm (default: \"BFGS\") maxit Maximum iterations (default: 1000) tol Convergence tolerance (default: 1e-6) verbose Print progress (default: FALSE) ... Additional arguments passed fitting functions.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Joint Model for Longitudinal and Survival Data Using ODEs — JointODE","text":"Object class \"JointODE\" containing: coefficients Estimated model parameters including longitudinal, survival, association parameters logLik Log-likelihood convergence AIC Akaike Information Criterion BIC Bayesian Information Criterion convergence Optimization convergence details fitted Fitted values submodels residuals Model residuals data Original input data call Matched function call","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Joint Model for Longitudinal and Survival Data Using ODEs — JointODE","text":"joint ODE model links longitudinal survival processes shared parameters. longitudinal trajectory modeled using ODEs capture non-linear dynamics, survival hazard incorporates features trajectory (level, slope, cumulative burden). Model estimation uses maximum likelihood numerical integration random effects via adaptive Gauss-Hermite quadrature.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit Joint Model for Longitudinal and Survival Data Using ODEs — JointODE","text":"Input data automatically validated processed fitting. large datasets complex ODE systems, consider adjusting control parameters improve convergence.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Joint Model for Longitudinal and Survival Data Using ODEs — JointODE","text":"","code":"if (FALSE) { # \\dontrun{ sim <- simulate() fit <- JointODE(   longitudinal_formula = v ~ x1 + x2,   longitudinal_data = sim$longitudinal_data,   survival_formula = Surv(time, status) ~ w1 + w2,   survival_data = sim$survival_data ) summary(fit) } # }"},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Joint ODE Model Data — simulate","title":"Simulate Joint ODE Model Data — simulate","text":"Generates synthetic data sophisticated joint modeling framework seamlessly integrates longitudinal biomarker trajectories survival outcomes ordinary differential equations (ODEs). simulation engine produces realistic clinical trial datasets complex biomarker dynamics govern event hazards via shared random effects trajectory features, capturing intricate interplay disease progression time--event processes.","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Joint ODE Model Data — simulate","text":"","code":"simulate(   n = 50,   alpha = c(0.5, 0.4, -0.5),   beta = c(-0.3, -0.5, 0.2, 0.1, 0.05),   phi = c(0.2, -0.15),   weibull_shape = 1.5,   weibull_scale = 8,   sigma_b = 0.1,   sigma_e = 0.1,   seed = 42,   verbose = TRUE )"},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Joint ODE Model Data — simulate","text":"n Integer. Number subjects simulate. Larger cohorts provide stable parameter estimates (default: 50). alpha Numeric vector length 3. Association parameters quantifying trajectory features influence survival hazard: [biomarker, velocity, acceleration]. Positive values indicate increased risk (default: c(0.5, 0.4, -0.5)). beta Numeric vector governing ODE dynamics (length 5). Controls biomarker trajectory evolution: [biomarker, velocity,   x1, x2, time]. Automatically normalized unit length identifiability (default: c(-0.3, -0.5, 0.2, 0.1, 0.05)). phi Numeric vector length 2. Baseline covariate effects modulating survival hazard independently biomarker dynamics: [w1, w2] (default: c(0.2, -0.15)). weibull_shape Numeric. Weibull shape parameter (\\(\\kappa\\)) characterizing baseline hazard evolution. Values > 1 yield increasing hazard (aging effect), < 1 decreasing hazard (selection effect), = 1 constant hazard (exponential) (default: 1.5). weibull_scale Numeric. Weibull scale parameter (\\(\\theta\\)) determining characteristic event time. Larger values shift hazard curve rightward (default: 8). sigma_b Numeric. Standard deviation subject-specific random effects capturing unobserved heterogeneity. Larger values increase -subject variability trajectories hazards (default: 0.1). sigma_e Numeric. Measurement error standard deviation reflecting assay precision biological fluctuations. Smaller values indicate reliable biomarker measurements (default: 0.1). seed Integer. Random seed ensuring reproducible simulations. Essential method validation comparison studies (default: 42). verbose Logical. Display informative progress messages simulation workflow (default: TRUE).","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Joint ODE Model Data — simulate","text":"list containing two complementary datasets: longitudinal_data Data frame longitudinal measurements: id: Subject identifier time: Measurement time v: Observed biomarker value incorporating latent trajectory, random effect, measurement error x1: First longitudinal covariate (standardized) x2: Second longitudinal covariate (standardized) biomarker: True latent biomarker trajectory value velocity: True latent biomarker velocity value acceleration: True latent biomarker acceleration value survival_data Data frame survival outcomes: id: Subject identifier time: Observed event/censoring time status: Event indicator (1 = event, 0 = censored) w1: First survival covariate (standardized) w2: Second survival covariate (standardized) b: Shared random effect","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Joint ODE Model Data — simulate","text":"Mathematical Framework simulation orchestrates sophisticated joint model architecture comprising two intricately coupled components: 1. Longitudinal Dynamics Biomarker evolution governed second-order nonlinear ODE system captures complex temporal dynamics: $$\\ddot{m}_i(t) = g(\\boldsymbol{\\beta}^{\\top} \\mathbf{Z}_i(t))$$ : \\(m_i(t)\\): Latent biomarker trajectory subject \\(\\) \\(\\mathbf{Z}_i(t) = [m_i(t), \\dot{m}_i(t), X_1, X_2, t]^{\\top}\\): State vector (5-dimensional) \\(g(u) = 2 \\tanh(u/3)\\): Bounded nonlinear transformation ensuring numerical stability biological plausibility \\(\\boldsymbol{\\beta}\\): Parameter vector governing homeostatic feedback, damping forces, external influences Observed measurements arise hierarchical structure incorporating systematic stochastic components: $$V_{ij} = m_i(T_{ij}) + b_i + \\varepsilon_{ij}$$ \\(b_i \\sim N(0, \\sigma_b^2)\\) captures subject-specific deviations \\(\\varepsilon_{ij} \\sim N(0, \\sigma_e^2)\\) represents measurement variability. 2. Survival Process instantaneous hazard function elegantly links biomarker dynamics event risk multiplicative model: $$\\lambda_i(t|b_i) = \\lambda_0(t) \\exp[\\boldsymbol{\\alpha}^{\\top}   \\mathbf{m}_i(t) + \\mathbf{W}_i^{\\top} \\boldsymbol{\\phi} + b_i]$$ : \\(\\lambda_0(t) = (\\kappa/\\theta)(t/\\theta)^{\\kappa-1}\\): Weibull baseline hazard capturing population-level risk evolution \\(\\mathbf{m}_i(t) = [m_i(t), \\dot{m}_i(t), \\ddot{m}_i(t)]^{\\top}\\): Comprehensive trajectory feature vector \\(\\mathbf{W}_i\\): Time-invariant baseline characteristics \\(b_i\\): Shared random effect inducing correlation longitudinal survival processes Simulation Workflow data generation proceeds carefully orchestrated pipeline: ODE Integration: Numerical solution coupled ODE system using adaptive Runge-Kutta methods automatic step size control optimal accuracy-efficiency tradeoff Event Time Generation: Sophisticated sampling conditional hazard distribution via simsurv engine, accounting complex time-varying covariates Censoring Mechanism: Realistic administrative censoring uniformly distributed 50th 95th percentiles event times, mimicking clinical trial follow-patterns Visit Scheduling: Adaptive measurement protocols higher frequency critical periods (quarterly initially, semi-annual subsequently) stochastic 10% missingness Parameter Interpretation Guide Trajectory Dynamics (beta): beta[1]: Homeostatic feedback strength (negative values promote stability) beta[2]: Damping coefficient controlling oscillation suppression beta[3-4]: Sensitivity longitudinal covariates beta[5]: Time trend capturing systematic changes Hazard Association (alpha): alpha[1]: Current biomarker value effect (positive indicates deleterious biomarker) alpha[2]: Velocity effect capturing prognostic value trajectory direction alpha[3]: Acceleration effect reflecting stability importance (negative suggests protective stability)","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulate Joint ODE Model Data — simulate","text":"Parameter vector beta undergoes automatic normalization unit length, ensuring model identifiability without user intervention Visit schedules intelligently adapt individual follow-durations, balancing information gain practical constraints Progress reporting can silenced via verbose = FALSE batch simulations","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Joint ODE Model Data — simulate","text":"","code":"# Basic usage with default parameters sim <- simulate() #> Step 1/2: Generating survival times... #> Step 2/2: Generating longitudinal data... str(sim) #> List of 2 #>  $ longitudinal_data:'data.frame':\t747 obs. of  8 variables: #>   ..$ id          : int [1:747] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ time        : num [1:747] 0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.5 ... #>   ..$ v           : num [1:747] 0.1872 0.1778 0.1431 0.0385 -0.2236 ... #>   ..$ x1          : num [1:747] -0.0407 -0.0407 -0.0407 -0.0407 -0.0407 ... #>   ..$ x2          : num [1:747] -2 -2 -2 -2 -2 ... #>   ..$ biomarker   : num [1:747] 0 -0.00646 -0.02413 -0.05051 -0.08327 ... #>   ..$ velocity    : num [1:747] 0 -0.05 -0.0897 -0.1198 -0.1408 ... #>   ..$ acceleration: num [1:747] -0.2207 -0.1792 -0.1393 -0.1017 -0.0669 ... #>  $ survival_data    :'data.frame':\t50 obs. of  6 variables: #>   ..$ id    : int [1:50] 1 2 3 4 5 6 7 8 9 10 ... #>   ..$ time  : num [1:50] 8.13 7.77 1.64 8.38 5.17 ... #>   ..$ status: int [1:50] 0 0 1 0 1 1 0 1 1 0 ... #>   ..$ w1    : num [1:50] 0.3219 -0.7838 1.5757 0.6429 0.0898 ... #>   ..$ w2    : num [1:50] 1.201 1.045 -1.003 1.848 -0.667 ... #>   ..$ b     : num [1:50] 0.1371 -0.0565 0.0363 0.0633 0.0404 ...  # Check data characteristics cat(\"Event rate:\", mean(sim$survival_data$status), \"\\n\") #> Event rate: 0.68  cat(   \"Observations per subject:\",   nrow(sim$longitudinal_data) / nrow(sim$survival_data), \"\\n\" ) #> Observations per subject: 14.94   # Visualize trajectories with survival information library(ggplot2) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Select subjects with different outcomes plot_data <- sim$longitudinal_data %>%   left_join(sim$survival_data[, c(\"id\", \"time\", \"status\")],     by = \"id\", suffix = c(\"\", \"_event\")   ) %>%   filter(id %in% sample(unique(id), 9))  ggplot(plot_data, aes(x = time, y = v)) +   geom_line(aes(color = factor(status)), alpha = 0.7) +   geom_point(aes(color = factor(status)), size = 1) +   geom_vline(aes(xintercept = time_event),     linetype = \"dashed\", alpha = 0.5   ) +   facet_wrap(~id, scales = \"free_y\", ncol = 3) +   scale_color_manual(     values = c(\"0\" = \"blue\", \"1\" = \"red\"), labels = c(\"Censored\", \"Event\")   ) +   theme_minimal() +   labs(     x = \"Time (years)\", y = \"Biomarker Value\", color = \"Outcome\",     title = \"Simulated Longitudinal Trajectories\"   )"},{"path":[]},{"path":"http://gongziyang.com/JointODE/news/index.html","id":"initial-release-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Initial Release","title":"JointODE 0.0.0.9000 (Development Version)","text":"Added basic package structure documentation Created data simulation vignette demonstrating intended modeling framework Included mathematical formulation technical details vignette Set testing infrastructure basic tests","code":""},{"path":"http://gongziyang.com/JointODE/news/index.html","id":"to-do-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"To Do","title":"JointODE 0.0.0.9000 (Development Version)","text":"Implement core estimation functions Add model fitting capabilities Include real data examples Expand test coverage","code":""}]

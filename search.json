[{"path":[]},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement meetziyang@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://gongziyang.com/JointODE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Ziyang Gong Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"simulation-setup","dir":"Articles","previous_headings":"","what":"Simulation Setup","title":"Comparison","text":"sim dataset generated using joint ODE framework following structure: Longitudinal Process: observed biomarker measurements : v_{ij} = m_i(t_{ij}) + b_i + \\epsilon_{ij} true biomarker trajectory m_i(t) evolves according : \\ddot{m}_i(t) = \\beta_1 m_i(t) + \\beta_2 \\dot{m}_i(t) + \\beta_3 + \\beta_4 x_{i1} + \\beta_5 x_{i2} b_i \\sim \\mathcal{N}(0, \\sigma_b^2) (random intercept) \\epsilon_{ij} \\sim \\mathcal{N}(0, \\sigma_e^2) (measurement error). Survival Process: hazard function incorporates biomarker dynamics: \\lambda_i(t) = \\lambda_0(t) \\exp\\{\\alpha_1 m_i(t) + \\alpha_2 \\dot{m}_i(t) + \\phi_1 w_{i1} + \\phi_2 w_{i2} + b_i\\} \\lambda_0(t)=8 baseline hazard \\alpha = (\\alpha_1, \\alpha_2) captures association biomarker value velocity.","code":"#> True Parameters: #>   Hazard: α = [0.3, 1.0], φ = [0.4, -0.6] #>   ODE: β = [-1.6, -1.8, 0.0, 1.3, -0.8] #>  #> Dataset: 200 subjects, 1222 observations, 68% events"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"ode-dynamics","dir":"Articles","previous_headings":"Simulation Setup","what":"ODE Dynamics","title":"Comparison","text":"left panel shows complete ODE dynamics four randomly selected subjects, illustrating biomarker value, velocity, acceleration evolve time. right panel demonstrates impact random intercept measurement error comparing true biomarker trajectories (lines) observed measurements (points). variance hierarchy correlation structure reflect fundamental properties ODE system. Unlike independent variables traditional models, components mechanistically linked differential equations, creating intrinsic dependencies capture true dynamics biomarker evolution.","code":"#> Variance Components: #>   Biomarker: 1.735 #>   Velocity: 0.425 #>   Acceleration: 3.803 #>  #> Pairwise Correlations: #>   ρ(Biomarker, Velocity): -0.119 #>   ρ(Biomarker, Acceleration): -0.655 #>   ρ(Velocity, Acceleration): -0.315"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"survival-distribution","dir":"Articles","previous_headings":"Simulation Setup","what":"Survival Distribution","title":"Comparison","text":"survival curve shows overall event pattern simulated dataset, shaded area representing 95% confidence interval.","code":""},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"model-comparison","dir":"Articles","previous_headings":"","what":"Model Comparison","title":"Comparison","text":"compare proposed method existing approaches: Oracle model uses true biomarker trajectory, derivatives, random effects observed time points. perfect information, approximates time-varying covariates using piecewise linear interpolation rather modeling continuous ODE dynamics. Based 200 simulation replicates, evaluate estimation accuracy association parameters (\\alpha_1, \\alpha_2) baseline covariate effects (\\phi_1, \\phi_2) using Bias, Empirical Standard Error (ESE), Average Standard Error (ASE), Coverage Probability (CP) 95% confidence intervals. Simulation Results simulation results demonstrate good estimation accuracy joint ODE-Cox model across different sample sizes. n=400, JointODE method yields minimal biases association parameters \\alpha_1 \\alpha_2, well baseline covariate effects \\phi_1 \\phi_2. coverage probabilities remain close nominal 95% level, indicating proper uncertainty quantification.","code":""},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Comparison","text":"","code":"# Data preparation for comparison models jsm_data <- dataPreprocess(   long = sim$data$longitudinal_data %>% rename(ID = id),   surv = sim$data$survival_data %>% rename(ID = id, survtime = time),   id.col = \"ID\",   long.time.col = \"time\",   surv.time.col = \"survtime\",   surv.event.col = \"status\" ) %>%   rename(     obstime = time,     start = start.join,     stop = stop.join,     event = event.join   ) %>%   select(     ID, obstime, observed, biomarker, velocity, acceleration,     x1, x2, w1, w2, b, start, stop, event   )  #-------------------------------------------- # Model 1: JointODE (Proposed Method) #-------------------------------------------- fit_jointode <- JointODE(   longitudinal_formula = observed ~ x1 + x2,   survival_formula = Surv(time, status) ~ w1 + w2,   longitudinal_data = sim$data$longitudinal_data,   survival_data = sim$data$survival_data,   state = as.matrix(sim$data$state) )  #-------------------------------------------- # Model 2: Traditional Joint Model (JSM) #-------------------------------------------- # Step 1: Longitudinal sub-model with natural splines fit_lme <- lme(   observed ~ x1 * bs(obstime, df = 5, Boundary.knots = c(0, 10)) +     x2 * bs(obstime, df = 5, Boundary.knots = c(0, 10)),   random = ~ 1 | ID,   data = jsm_data )  # Step 2: Survival sub-model fit_cox <- coxph(   Surv(start, stop, event) ~ w1 + w2 + cluster(ID),   data = jsm_data, x = TRUE )  # Step 3: Joint model fit_jsm <- jmodelTM(   fit_lme, fit_cox,   data = jsm_data,   timeVarY = \"obstime\" )  #-------------------------------------------- # Model 3: Time-varying Cox (Oracle - Theoretical Benchmark) #-------------------------------------------- fit_oracle <- coxph(   Surv(start, stop, event) ~ biomarker + velocity  + w1 + w2 +     offset(b) + cluster(ID),   data = jsm_data )"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"real-data-example","dir":"Articles","previous_headings":"","what":"Real Data Example","title":"Comparison","text":"","code":"data(pbc)  #-------------------------------------------- # Model 1: Traditional JSM (使用原始pbc数据) #-------------------------------------------- fit_lme_pbc <- lme(   log(serBilir) ~ drug *     bs(obstime, df = 4, degree = 2, Boundary.knots = c(0, 15)),   random = ~ 1 | ID,   data = pbc )  fit_cox_pbc <- coxph(   Surv(start, stop, event) ~ drug,   data = pbc,   x = TRUE )  fit_jt_pbc <- jmodelTM(   fit_lme_pbc, fit_cox_pbc, pbc,   timeVarY = \"obstime\" )  summary(fit_jt_pbc)  #-------------------------------------------- # Model 2: JointODE (使用分离的数据) #-------------------------------------------- longitudinal_pbc <- pbc %>%   select(ID, obstime, serBilir, drug) %>%   filter(!is.na(serBilir)) %>%   mutate(observed = log(serBilir)) %>%  # 取对数转换   rename(id = ID, time = obstime) %>%   select(id, time, observed, drug) %>%   arrange(id, time)  survival_pbc <- pbc %>%   group_by(ID) %>%   slice_tail(n = 1) %>%  # 取每个患者的最后一条记录   ungroup() %>%   select(ID, Time, death, drug) %>%   rename(     id = ID,     time = Time,  # 真实生存时间     status = death  # 事件状态   )  # 创建初始状态矩阵（使用第一次观测） initial_states <- longitudinal_pbc %>%   group_by(id) %>%   slice(1) %>%   ungroup() %>%   select(id, observed) %>%   mutate(     velocity = 0  # 初始速度假设为0   ) %>%   arrange(id)  state_matrix <- as.matrix(initial_states[, c(\"observed\", \"velocity\")])  fit_jointode_pbc <- JointODE(   longitudinal_formula = observed ~ drug,   survival_formula = Surv(time, status) ~ drug,   longitudinal_data = longitudinal_pbc,   survival_data = survival_pbc,   state = state_matrix,   parallel = TRUE,   control = list(verbose = 3) )"},{"path":"http://gongziyang.com/JointODE/articles/illustration.html","id":"autonomous-systems","dir":"Articles","previous_headings":"","what":"Autonomous Systems","title":"Biomarker Dynamics via Second-Order ODEs","text":"autonomous systems constant excitation (u(t) = c), simulate various damping ratios zero excitation (c = 0):  Four biological datasets illustrate distinct damping behaviors: Canadian Lynx (1821-1934): Annual trapping data showing predator-prey population cycles pronounced oscillations Theophylline: Pharmacokinetic data 12 subjects showing drug concentration oral administration anti-asthmatic medication Indomethacin: Plasma concentration following intravenous injection anti-inflammatory drug 6 subjects Orange Tree Growth: Trunk circumference measurements time forestry growth study","code":""},{"path":"http://gongziyang.com/JointODE/articles/illustration.html","id":"non-autonomous-system","dir":"Articles","previous_headings":"","what":"Non-Autonomous System","title":"Biomarker Dynamics via Second-Order ODEs","text":"Non-autonomous systems time-varying excitation u(t) occur pharmacological environmental contexts. response depends damping ratio \\xi input characteristics. Consider step input t = 50: u(t) = \\begin{cases} 0 & t < 50 \\\\ 0.5 & t \\geq 50 \\end{cases} induces transition m_{\\text{eq}} = 0 m_{\\text{eq}} = 0.5k, transient behavior determined \\xi:  analysis requires \\omega_n^2 \\geq 0 real natural frequencies, focusing stable oscillatory systems better represent biological reality. Systems \\omega_n^2 < 0 exhibit purely exponential divergence without oscillations lack practical relevance modeling physiological processes.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"longitudinal-sub-model","dir":"Articles","previous_headings":"Model Framework","what":"Longitudinal Sub-Model","title":"Technical Details","text":"observed biomarker measurements modeled : V_{ij}=m_i(T_{ij})+b_i+\\varepsilon_{ij},\\quad =1,\\ldots,n,\\quad j=1,\\ldots,n_i : V_{ij}: Observed biomarker value subject time T_{ij} m_i(t): True underlying biomarker trajectory b_i\\sim\\mathcal{N}(0,\\sigma_{b}^{2}): Subject-specific random intercept \\varepsilon_{ij}\\sim\\mathcal{N}(0,\\sigma_{e}^{2}): Measurement error biomarker trajectory evolution characterized following second-order differential equation: \\ddot{m}_i(t) + 2 \\xi \\omega_n \\dot{m}_i(t) + \\omega_n^2 m_i(t) = k \\omega_n^2 \\boldsymbol{X}_i(t)^{\\top} \\boldsymbol{\\beta}, \\dot{m}_i(t) \\ddot{m}_i(t) denote biomarker’s velocity acceleration, respectively, \\boldsymbol{X}_i(t) denotes time-varying covariates. parameters usual interpretations: \\omega_n > 0 natural frequency, \\xi damping ratio, k steady-state gain.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"survival-sub-model","dir":"Articles","previous_headings":"Model Framework","what":"Survival Sub-Model","title":"Technical Details","text":"hazard function incorporates biomarker dynamics: \\lambda_i(t) = \\lambda_{0}(t)\\exp\\left[\\alpha_1 m_i(t) + \\alpha_2 \\dot{m}_i(t) + \\mathbf{W}_i(t)^{\\top}\\boldsymbol{\\phi}+b_{}\\right] : \\lambda_{0}(t): Baseline hazard (e.g., Weibull, piecewise constant) \\mathbf{W}_i(t): Time-dependent time-independent covariates effects \\boldsymbol{\\phi}","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"ode-system","dir":"Articles","previous_headings":"Model Framework","what":"ODE System","title":"Technical Details","text":"complete system couples biomarker trajectory dynamics survival process. state vector \\mathbf{s}_i(t) = (\\Lambda_i(t), m_i(t), \\dot{m}_i(t))^{\\top} evolves according : \\frac{d\\mathbf{s}_i}{dt} = \\begin{pmatrix} \\lambda_i(t|b_i) \\\\ \\dot{m}_i(t) \\\\ \\ddot{m}_i(t) \\end{pmatrix} initial conditions \\mathbf{s}_i(0) = (0, m_{i0}, \\dot{m}_{i0})^{\\top}, m_{i0} \\dot{m}_{i0} initial biomarker value velocity subject .","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"model-parameterization","dir":"Articles","previous_headings":"","what":"Model Parameterization","title":"Technical Details","text":"parameter estimation, need specify parametric forms model components. Hazard Function: parameterize log baseline hazard using B-splines: \\log\\lambda_0(t) = \\boldsymbol{\\eta}^{\\top} \\mathbf{B}^{(\\lambda)}(t) Thus, full hazard function becomes: \\lambda_i(t|b_i) = \\exp\\left[\\boldsymbol{\\eta}^{\\top} \\mathbf{B}^{(\\lambda)}(t) + \\mathbf{W}_i^{\\top}\\boldsymbol{\\phi} + \\mathbf{m}_i(t)^{\\top}\\boldsymbol{\\alpha} + b_{}\\right] \\mathbf{B}^{(\\lambda)}(t) B-spline basis log baseline hazard, \\boldsymbol{\\eta} corresponding coefficients. Acceleration Function: make model tractable, express acceleration linear function feature vector: \\ddot{m}_i(t) = \\boldsymbol{\\beta}^{\\top} \\mathbf{Z}_i(t) \\mathbf{Z}_i(t) = [m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t)^{\\top}(t)]^{\\top} feature vector coefficients \\boldsymbol{\\beta} = [\\beta_1, \\beta_2, \\boldsymbol{\\beta}_X^{\\top}]^{\\top}. joint likelihood subject integrates random effect: L_i(\\boldsymbol{\\theta}) = \\int p(\\mathbf{V}_i | b_i) \\cdot p(T_i, \\delta_i | b_i) \\cdot p(b_i) \\, db_i \\boldsymbol{\\theta} = (\\boldsymbol{\\eta}, \\boldsymbol{\\phi}, \\boldsymbol{\\alpha}, \\boldsymbol{\\beta}, \\sigma_e^2, \\sigma_b^2). Likelihood Components: Longitudinal: p(\\mathbf{V}_i | b_i) = \\prod_{j=1}^{n_i} \\mathcal{N}(V_{ij}; m_i(T_{ij}) + b_i, \\sigma_e^2) Survival: p(T_i, \\delta_i | b_i) = [\\lambda_i(T_i|b_i)]^{\\delta_i} \\exp[-\\Lambda_i(T_i|b_i)] Random Effect: p(b_i) \\sim \\mathcal{N}(0, \\sigma_b^2)","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"estimation-procedure","dir":"Articles","previous_headings":"","what":"Estimation Procedure","title":"Technical Details","text":"linear acceleration model, use direct gradient-based optimization marginal likelihood.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"posterior-computation","dir":"Articles","previous_headings":"Estimation Procedure","what":"Posterior Computation","title":"Technical Details","text":"subject , compute posterior distribution b_i given observed data \\mathcal{O}_i. Key simplification: hazard cumulative hazard factor : \\lambda_i(t|b_i) = e^{b_i} \\lambda_i(t|0) \\Lambda_i(t|b_i) = e^{b_i} \\Lambda_i(t|0) Implementation: Solve baseline ODE b_i = 0 obtain m_i(t), \\lambda_i(t|0), \\Lambda_i(T_i|0) Find posterior mode \\tilde{b}_i maximizing: \\ell_i(b) = b\\left[\\frac{S_i}{\\sigma_e^2} + \\delta_i\\right] - \\frac{b^2}{2}\\left[\\frac{n_i}{\\sigma_e^2} + \\frac{1}{\\sigma_b^2}\\right] - e^b\\Lambda_i(T_i|0) S_i = \\sum_j(V_{ij} - m_i(T_{ij})) Mean: \\hat{b}_i = E[b_i|\\mathcal{O}_i] Variance: \\hat{v}_i = \\text{Var}[b_i|\\mathcal{O}_i] Transform: E[e^{b_i}|\\mathcal{O}_i] survival updates","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"objective-function","dir":"Articles","previous_headings":"Estimation Procedure","what":"Objective Function","title":"Technical Details","text":"maximize expected complete-data log-likelihood: Q(\\boldsymbol{\\theta}) = Q_{\\text{long}} + Q_{\\text{surv}} + Q_{\\text{RE}} : Q_{\\text{long}} = -\\frac{1}{2\\sigma_e^2}\\sum_{,j} [(V_{ij} - m_i(T_{ij}) - \\hat{b}_i)^2 + \\hat{v}_i] - \\frac{N}{2}\\log(2\\pi\\sigma_e^2), N = \\sum_{=1}^n n_i total number observations Q_{\\text{surv}} = \\sum_i [\\delta_i(\\log\\lambda_i(T_i|0) + \\hat{b}_i) - E[e^{b_i}|\\mathcal{O}_i]\\Lambda_i(T_i|0)] Q_{\\text{RE}} = -\\frac{1}{2\\sigma_b^2}\\sum_i (\\hat{b}_i^2 + \\hat{v}_i) - \\frac{n}{2}\\log(2\\pi\\sigma_b^2) Optimization Strategy: optimize parameters \\boldsymbol{\\theta} using gradient-based methods: \\hat{\\boldsymbol{\\theta}} = \\arg\\max_{\\boldsymbol{\\theta}} Q(\\boldsymbol{\\theta}) variance components updated using closed-form expressions:  \\sigma_e^2 = \\frac{1}{N}\\sum_{,j}[(V_{ij} - m_i(T_{ij}) - \\hat{b}_i)^2 + \\hat{v}_i],\\quad\\sigma_b^2 = \\frac{1}{n}\\sum_i(\\hat{b}_i^2 + \\hat{v}_i)","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"overview-of-gradient-computation","dir":"Articles","previous_headings":"Computational Details","what":"Overview of Gradient Computation","title":"Technical Details","text":"optimization requires maximization expected complete-data log-likelihood Q(\\boldsymbol{\\theta}) respect parameter vector \\boldsymbol{\\theta} = (\\boldsymbol{\\eta}, \\boldsymbol{\\phi}, \\boldsymbol{\\alpha}, \\boldsymbol{\\beta}, \\sigma_e^2, \\sigma_b^2). perform optimization efficiently, gradient-based methods necessitate computation : \\nabla_{\\boldsymbol{\\theta}} Q = \\sum_{=1}^{n}\\sum_{j=1}^{n_i} \\frac{r_{ij}}{\\sigma_e^2} \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\theta}} + \\sum_{=1}^{n} \\left[\\delta_i \\frac{\\partial \\log\\lambda_i(T_i|0)}{\\partial \\boldsymbol{\\theta}} - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial \\Lambda_i(T_i|0)}{\\partial \\boldsymbol{\\theta}}\\right] r_{ij} = V_{ij} - m_i(T_{ij}) - \\hat{b}_i denotes residual observed fitted longitudinal values. gradient formula reveals fundamental computational challenge: must evaluate sensitivities biomarker trajectory m_i(t) hazard functions respect model parameters. Specifically, require: \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\theta}}: trajectory sensitivities observation times \\frac{\\partial \\log\\lambda_i(T_i|0)}{\\partial \\boldsymbol{\\theta}}: log hazard sensitivities event times \\frac{\\partial \\Lambda_i(T_i|0)}{\\partial \\boldsymbol{\\theta}}: cumulative hazard sensitivities event times sensitivities depend solution nonlinear second-order ODE system derived closed form. first present explicit forms gradients, discuss numerical methods computation.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"explicit-forms-of-gradient-components","dir":"Articles","previous_headings":"Computational Details","what":"Explicit Forms of Gradient Components","title":"Technical Details","text":"parameter vector \\boldsymbol{\\theta} = (\\boldsymbol{\\eta}, \\boldsymbol{\\phi}, \\boldsymbol{\\alpha}, \\boldsymbol{\\beta}) includes hazard model parameters linear acceleration coefficients. derive gradient respect component.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"gradient-components","dir":"Articles","previous_headings":"Computational Details > Explicit Forms of Gradient Components","what":"Gradient Components","title":"Technical Details","text":"gradient components decompose follows: Baseline hazard coefficients (\\boldsymbol{\\eta}): \\nabla_{\\boldsymbol{\\eta}} Q = \\sum_{=1}^{n} \\left[\\delta_i \\mathbf{B}^{(\\lambda)}(T_i) - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\eta}}\\right] Baseline covariate effects (\\boldsymbol{\\phi}): \\nabla_{\\boldsymbol{\\phi}} Q = \\sum_{=1}^{n} \\left[\\delta_i - E[e^{b_i}|\\mathcal{O}_i] \\cdot \\Lambda_i(T_i|0)\\right] \\mathbf{W}_i Association parameters (\\boldsymbol{\\alpha}): \\nabla_{\\boldsymbol{\\alpha}} Q = \\sum_{=1}^{n} \\left[\\delta_i \\mathbf{m}_i(T_i) - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\alpha}}\\right]","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"gradient-with-respect-to-linear-acceleration-coefficients-boldsymbolbeta","dir":"Articles","previous_headings":"Computational Details > Explicit Forms of Gradient Components","what":"Gradient with Respect to Linear Acceleration Coefficients \\boldsymbol{\\beta}","title":"Technical Details","text":"gradient respect linear acceleration coefficients : \\nabla_{\\boldsymbol{\\beta}} Q = \\sum_{=1}^{n}\\sum_{j=1}^{n_i} \\frac{r_{ij}}{\\sigma_e^2} \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\beta}} + \\sum_{=1}^{n} \\left[\\delta_i \\boldsymbol{\\alpha}^{\\top} \\frac{\\partial \\mathbf{m}_i(T_i)}{\\partial \\boldsymbol{\\beta}} - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial \\Lambda_i(T_i|0)}{\\partial \\boldsymbol{\\beta}}\\right] r_{ij} = V_{ij} - m_i(T_{ij}) - \\hat{b}_i denotes residual observed fitted values.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"computing-the-required-sensitivities","dir":"Articles","previous_headings":"Computational Details","what":"Computing the Required Sensitivities","title":"Technical Details","text":"gradient expressions involve two types sensitivities must computed numerically:","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"cumulative-hazard-sensitivities","dir":"Articles","previous_headings":"Computational Details > Computing the Required Sensitivities","what":"Cumulative Hazard Sensitivities","title":"Technical Details","text":"cumulative hazard function \\Lambda_i(T_i|0) depends parameters instantaneous hazard. parameters affecting hazard directly, sensitivities computed : \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\eta}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\mathbf{B}^{(\\lambda)}(t)\\,\\mathrm{d}t,\\quad \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\alpha}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\mathbf{m}_i(t)\\,\\mathrm{d}t,\\quad \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\phi}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\mathbf{W}_i\\,\\mathrm{d}t parameters affecting trajectory m_i(t), chain rule yields: \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\beta}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\boldsymbol{\\alpha}^{\\top}\\frac{\\partial\\mathbf{m}_i(t)}{\\partial\\boldsymbol{\\beta}}\\,\\mathrm{d}t","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"trajectory-sensitivities","dir":"Articles","previous_headings":"Computational Details > Computing the Required Sensitivities > Cumulative Hazard Sensitivities","what":"Trajectory Sensitivities","title":"Technical Details","text":"trajectory sensitivities respect parameters affecting ODE system complex must computed numerically. sensitivities satisfy following relationships: single-index coefficients (\\boldsymbol{\\beta}): trajectory sensitivities evolve according : \\frac{\\partial m_i(t)}{\\partial \\boldsymbol{\\beta}} = \\int_{0}^{t} \\frac{\\partial\\dot{m}_i(s)}{\\partial \\boldsymbol{\\beta}} \\,\\mathrm{d}s,\\quad \\frac{\\partial\\dot{m}_i(t)}{\\partial \\boldsymbol{\\beta}} = \\int_{0}^{t} \\frac{\\partial \\ddot{m}_i(s)}{\\partial \\boldsymbol{\\beta}} \\,\\mathrm{d}s acceleration sensitivity given : \\frac{\\partial \\ddot{m}_i(t)}{\\partial \\boldsymbol{\\beta}} = \\mathbf{Z}_i(t) + \\boldsymbol{\\beta}^{\\top} \\frac{\\partial \\mathbf{Z}_i(t)}{\\partial\\boldsymbol{\\beta}} , \\mathbf{Z}_i(t) = [m_i(t), \\dot{m}_i(t), \\mathbf{X}_i^{\\top}(t), t]^{\\top} feature vector. Since acceleration now linear \\boldsymbol{\\beta}, : \\frac{\\partial \\mathbf{Z}_i(t)}{\\partial\\boldsymbol{\\beta}} = \\begin{bmatrix} \\frac{\\partial m_i(t)}{\\partial \\boldsymbol{\\beta}} \\\\ \\frac{\\partial \\dot{m}_i(t)}{\\partial \\boldsymbol{\\beta}} \\\\ \\mathbf{0} \\\\ 0 \\end{bmatrix} covariates \\mathbf{X}_i(t) time t depend \\boldsymbol{\\beta}.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"numerical-methods-for-sensitivity-computation","dir":"Articles","previous_headings":"Computational Details","what":"Numerical Methods for Sensitivity Computation","title":"Technical Details","text":"linear acceleration model, sensitivities can computed efficiently. Two computational strategies available: Forward Sensitivity Method: Augments original ODE system sensitivity equations integrated simultaneously state equations Adjoint Method: Solves backward--time adjoint system, offering computational advantages number parameters exceeds number objective function evaluations","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"forward-sensitivity-method","dir":"Articles","previous_headings":"Computational Details > Numerical Methods for Sensitivity Computation","what":"Forward Sensitivity Method","title":"Technical Details","text":"forward method extends original three-dimensional state space include sensitivity trajectories, solving augmented ODE systems simultaneously evolve primary state variables parameter sensitivities. Augmented system: \\frac{d}{dt}\\begin{bmatrix} \\Lambda_i \\\\ m_i \\\\ \\dot{m}_i \\\\ \\partial\\Lambda_{\\eta,} \\\\ \\partial\\Lambda_{\\alpha,} \\\\ \\partial m_{,\\beta} \\\\ \\partial\\dot{m}_{,\\beta} \\\\ \\partial\\Lambda_{\\beta,} \\end{bmatrix} = \\begin{bmatrix} \\lambda_i(t|0) \\\\ \\dot{m}_i(t) \\\\ \\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t) \\\\ \\mathbf{B}^{(\\lambda)}(t) \\lambda_i(t|0) \\\\ \\mathbf{m}_i(t) \\lambda_i(t|0) \\\\ \\partial \\dot{m}_{,\\beta} \\\\ \\mathbf{Z}_i(t) + \\boldsymbol{\\beta}^{\\top} \\frac{\\partial \\mathbf{Z}_i(t)}{\\partial\\boldsymbol{\\beta}} \\\\ \\boldsymbol{\\alpha}^{\\top}\\frac{\\partial\\mathbf{m}_i(t)}{\\partial\\boldsymbol{\\beta}} \\cdot \\lambda_i(t|0) \\end{bmatrix} Note \\partial\\Lambda_{\\phi,} = 0 since survival covariates \\mathbf{W}_i affect trajectory dynamics. , \\partial\\Lambda_{\\eta,}, \\partial\\Lambda_{\\alpha,}, \\partial\\Lambda_{\\beta,} denote cumulative hazard sensitivities respect corresponding parameter groups. single augmented system must integrated t=0 t=T_i subject obtain complete sensitivity information required gradient computation.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"adjoint-method","dir":"Articles","previous_headings":"Computational Details > Numerical Methods for Sensitivity Computation","what":"Adjoint Method","title":"Technical Details","text":"adjoint method provides alternative, memory-efficient approach computing gradients, particularly advantageous number parameters substantially exceeds number objective function components. Instead propagating sensitivities forward time, method solves backward--time adjoint system. Mathematical Foundation Given ODE system \\frac{d\\mathbf{s}}{dt} = F(t, \\mathbf{s}; \\boldsymbol{\\theta}) \\mathbf{s}(0) = \\mathbf{s}_0, derive adjoint sensitivity formula. Since \\mathbf{s}(t) satisfies ODE, function \\boldsymbol{\\kappa}(t): \\mathbf{s}(T) = \\mathbf{s}(T) - \\int_0^T \\boldsymbol{\\kappa}^{\\top} \\left[\\frac{d\\mathbf{s}}{dt} - F\\right] dt Differentiating respect \\boldsymbol{\\theta} using integration parts: \\frac{\\partial \\mathbf{s}(T)}{\\partial \\boldsymbol{\\theta}} = \\int_0^T \\boldsymbol{\\kappa}^{\\top} \\frac{\\partial F}{\\partial \\boldsymbol{\\theta}} dt - \\boldsymbol{\\kappa}(T)^{\\top} \\frac{\\partial \\mathbf{s}(T)}{\\partial \\boldsymbol{\\theta}} + \\int_0^T \\left[\\frac{d\\boldsymbol{\\kappa}}{dt} + \\left(\\frac{\\partial F}{\\partial \\mathbf{s}}\\right)^{\\top} \\boldsymbol{\\kappa}\\right]^{\\top} \\frac{\\partial \\mathbf{s}}{\\partial \\boldsymbol{\\theta}} dt Define \\tilde{\\boldsymbol{\\kappa}} = \\boldsymbol{\\kappa} + \\mathbf{e}_k choose satisfy: \\frac{d\\tilde{\\boldsymbol{\\kappa}}}{dt} = -\\left(\\frac{\\partial F}{\\partial \\mathbf{s}}\\right)^{\\top} \\tilde{\\boldsymbol{\\kappa}}, \\quad \\tilde{\\boldsymbol{\\kappa}}(T) = \\mathbf{e}_k choice eliminates \\frac{\\partial \\mathbf{s}}{\\partial \\boldsymbol{\\theta}} terms, yielding: \\frac{\\partial \\mathbf{s}_k(T)}{\\partial \\boldsymbol{\\theta}} = \\int_0^T \\tilde{\\boldsymbol{\\kappa}}^{\\top} \\frac{\\partial F}{\\partial \\boldsymbol{\\theta}}\\bigg|_{\\mathbf{s}} dt \\mathbf{e}_k k-th unit vector (.e., vector 1 k-th position 0 elsewhere).","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"inference","dir":"Articles","previous_headings":"","what":"Inference","title":"Technical Details","text":"longitudinal sub-model, several statistcs useful inference, including T = \\frac{2\\pi}{\\omega_n} damping ratio \\xi. However, directly estimated parameters. can use delta method obtain standard errors. Since  \\omega_n = \\sqrt{-\\beta_1}, \\quad \\xi = -\\frac{\\beta_2}{2\\sqrt{-\\beta_1}},   \\frac{\\partial T}{\\partial \\beta_1} = -\\frac{\\pi}{(-\\beta_1)^{3/2}}, \\quad \\frac{\\partial T}{\\partial \\beta_2} = 0, \\quad \\frac{\\partial \\xi}{\\partial \\beta_1} = -\\frac{\\beta_2}{4(-\\beta_1)^{3/2}}, \\quad \\frac{\\partial \\xi}{\\partial \\beta_2} = -\\frac{1}{2\\sqrt{-\\beta_1}}.  Thus, variance-covariance matrix (\\omega_n, \\xi) can approximated  \\mathbf{J} \\begin{pmatrix} \\text{Var}(\\beta_1) & \\text{Cov}(\\beta_1, \\beta_2) \\\\ \\text{Cov}(\\beta_1, \\beta_2) & \\text{Var}(\\beta_2) \\end{pmatrix} \\mathbf{J}^{\\top},  \\mathbf{J} = \\begin{pmatrix} \\frac{\\partial T}{\\partial \\beta_1} & \\frac{\\partial T}{\\partial \\beta_2} \\\\ \\frac{\\partial \\xi}{\\partial \\beta_1} & \\frac{\\partial \\xi}{\\partial \\beta_2} \\end{pmatrix}.","code":""},{"path":"http://gongziyang.com/JointODE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ziyang Gong. Author, maintainer.","code":""},{"path":"http://gongziyang.com/JointODE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gong Z (2025). JointODE: Joint Modeling Longitudinal Survival Data Using ODEs. R package version 0.1.0, https://github.com/ziyangg98/JointODE.","code":"@Manual{,   title = {JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs},   author = {Ziyang Gong},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/ziyangg98/JointODE}, }"},{"path":"http://gongziyang.com/JointODE/index.html","id":"jointode","dir":"","previous_headings":"","what":"Joint Modeling of Longitudinal and Survival Data Using ODEs","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"JointODE package provides unified framework joint modeling longitudinal biomarker measurements time--event outcomes using ordinary differential equations (ODEs). approach enables simultaneous analysis biomarker trajectories impact survival outcomes.","code":""},{"path":"http://gongziyang.com/JointODE/index.html","id":"model-setup","dir":"","previous_headings":"","what":"Model Setup","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"observed biomarker measurements modeled : V_{ij}=m_i(T_{ij})+b_i+\\varepsilon_{ij},\\quad =1,\\ldots,n,\\quad j=1,\\ldots,n_i : V_{ij}: Observed biomarker value subject time T_{ij} m_i(t): True underlying biomarker trajectory b_i\\sim\\mathcal{N}(0,\\sigma_{b}^{2}): Subject-specific random intercept \\varepsilon_{ij}\\sim\\mathcal{N}(0,\\sigma_{e}^{2}): Measurement error biomarker trajectory evolution characterized following second-order differential equation: \\ddot{m}_i(t) + 2 \\xi \\omega_n \\dot{m}_i(t) + \\omega_n^2 m_i(t) = k \\omega_n^2 \\boldsymbol{X}_i(t)^{\\top} \\boldsymbol{\\beta}, \\dot{m}_i(t) \\ddot{m}_i(t) denote biomarker’s velocity acceleration, respectively, \\boldsymbol{X}_i(t) denotes time-varying covariates. parameters usual interpretations: \\omega_n > 0 natural frequency, \\xi damping ratio, k steady-state gain.","code":""},{"path":"http://gongziyang.com/JointODE/index.html","id":"survival-sub-model","dir":"","previous_headings":"Model Setup","what":"Survival Sub-Model","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"hazard function incorporates biomarker dynamics: \\lambda_i(t) = \\lambda_{0}(t)\\exp\\left[\\alpha_1 m_i(t) + \\alpha_2 \\dot{m}_i(t) + \\mathbf{W}_i(t)^{\\top}\\boldsymbol{\\phi}+b_{}\\right] : \\lambda_{0}(t): Baseline hazard (e.g., Weibull, piecewise constant) \\mathbf{W}_i(t): Time-dependent time-independent covariates effects \\boldsymbol{\\phi} detailed mathematical derivations including ODE formulation, likelihood construction, EM algorithm specifics, see technical documentation.","code":""},{"path":"http://gongziyang.com/JointODE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"can install development version JointODE GitHub :","code":"# install.packages(\"pak\") pak::pak(\"ziyangg98/JointODE\")"},{"path":"http://gongziyang.com/JointODE/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"’s basic example demonstrating typical usage:","code":"library(JointODE) #>  #> Attaching package: 'JointODE' #> The following object is masked from 'package:stats': #>  #>     simulate library(survival)  # Load example dataset data(sim)  # Fit joint ODE model fit <- JointODE(   longitudinal_formula = observed ~ x1 + x2,   survival_formula = Surv(time, status) ~ w1 + w2,   longitudinal_data = sim$data$longitudinal_data,   survival_data = sim$data$survival_data,   state = as.matrix(sim$data$state),   parallel = TRUE )  # Model summary summary(fit) #>  #> Call: #> JointODE(longitudinal_formula = observed ~ x1 + x2, survival_formula = Surv(time,  #>     status) ~ w1 + w2, longitudinal_data = sim$data$longitudinal_data,  #>     survival_data = sim$data$survival_data, state = as.matrix(sim$data$state),  #>     parallel = TRUE) #>  #> Data Descriptives: #> Longitudinal Process            Survival Process #> Number of Observations: 1222    Number of Events: 135 (68%) #> Number of Subjects: 200 #>  #>        AIC        BIC     logLik #>  -1801.969  -1742.599    918.984 #>  #> Coefficients: #> Longitudinal Process: Second-Order ODE Model #>                Estimate Std. Error z value Pr(>|z|)     #> -omega_n^2    -1.581145   0.016643 -95.004   <2e-16 *** #> -2*xi*omega_n -1.788044   0.023600 -75.764   <2e-16 *** #> (Intercept)    0.002820   0.007587   0.372     0.71     #> x1             1.258015   0.014802  84.992   <2e-16 *** #> x2            -0.785201   0.010397 -75.520   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> ODE System Characteristics: #>                    Estimate Std. Error z value Pr(>|z|)     #> T (period)          4.99682    0.02630  190.01   <2e-16 *** #> xi (damping ratio)  0.71099    0.01286   55.27   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Survival Process: Proportional Hazards Model #>         Estimate Std. Error z value Pr(>|z|)     #> alpha_1   0.3623     0.1188   3.050  0.00229 **  #> alpha_2   0.7140     0.3944   1.810  0.07026 .   #> w1        0.3389     0.0855   3.964 7.37e-05 *** #> w2       -0.4955     0.1725  -2.873  0.00407 **  #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Baseline Hazard: B-spline with 7 basis functions #> (Coefficients range: [-2.930, -1.514] ) #>  #> Variance Components: #>               StdDev #> Random Effect       0.092774 #> Residual            0.102891 #>  #> Model Diagnostics: #> C-index (Concordance): 0.793 #> Convergence: EM algorithm converged after 35 iterations  # Generate predictions predictions <- predict(fit, times = seq(0, 10, by = 0.25))"},{"path":"http://gongziyang.com/JointODE/index.html","id":"visualization","dir":"","previous_headings":"","what":"Visualization","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"","code":"#>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"http://gongziyang.com/JointODE/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"Please note JointODE project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","title":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","text":"Implements joint modeling longitudinal biomarker trajectories time--event outcomes using ordinary differential equations (ODEs). package provides tools simultaneous analysis biomarker dynamics survival data, capturing complex temporal patterns ODE-based trajectory modeling accounting association event times shared random effects.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/reference/JointODE-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","text":"Maintainer: Ziyang Gong meetziyang@gmail.com","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"Implements unified framework jointly modeling longitudinal biomarker trajectories time--event outcomes using ordinary differential equations (ODEs). model captures complex non-linear dynamics biomarker evolution simultaneously quantifying association survival risk shared random effects flexible hazard specifications.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"","code":"JointODE(   longitudinal_formula,   survival_formula,   longitudinal_data,   survival_data,   state = NULL,   id = \"id\",   time = \"time\",   autonomous = TRUE,   spline_baseline = list(degree = 3, n_knots = 3, knot_placement = \"equal\",     boundary_knots = NULL),   robust = FALSE,   init = NULL,   control = list(),   parallel = FALSE,   n_cores = NULL,   ... )"},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"longitudinal_formula formula specifying longitudinal submodel. left-hand side defines response variable, right-hand side specifies fixed effects including time-varying baseline covariates (e.g., biomarker ~ time + treatment + age). survival_formula formula survival submodel using Surv(time, status) notation left-hand side. right-hand side specifies baseline hazard covariates (e.g., Surv(event_time, event) ~ treatment + age). longitudinal_data data frame containing repeated measurements one row per observation. Required columns include subject identifier, measurement times, response values, covariates specified formula. survival_data data frame time--event information containing one row per subject. Must include event/censoring times, event indicators, baseline covariates. state matrix specifying initial conditions ODE system two columns: initial biomarker values first derivatives. row corresponds one subject. NULL, defaults zero matrix appropriate dimensions (default: NULL). id Character string specifying column name subject identifiers. variable must present longitudinal survival datasets link observations (default: \"id\"). time Character string specifying column name measurement times longitudinal dataset (default: \"time\"). autonomous Logical flag indicating whether ODE system autonomous (time-independent). TRUE, acceleration computation excludes explicit time term, resulting \\(\\ddot{m}(t) = f(m(t), \\dot{m}(t), X)\\) instead \\(\\ddot{m}(t) = f(m(t), \\dot{m}(t), X, t)\\). Autonomous systems often better numerical stability theoretical properties (default: TRUE). spline_baseline list controlling B-spline representation baseline hazard function following components: degree Polynomial degree B-spline basis functions (default: 3, cubic splines) n_knots Number interior knots flexibility (default: 3, providing moderate flexibility) knot_placement Strategy positioning knots: \"quantile\" places knots quantiles observed event times, \"equal\" uses equally-spaced knots (default: \"quantile\") boundary_knots numeric vector length 2 specifying boundary knot locations. NULL, automatically set range observed event times (default: NULL) robust Logical flag indicating whether use robust variance estimation (default: FALSE). init Optional list providing initial values model parameters. structure fitted model's parameters component elements: coefficients list containing: baseline: Vector B-spline coefficients baseline hazard (length = number spline basis functions) hazard: Vector hazard parameters including association parameters (2) survival covariates acceleration: Vector longitudinal fixed effects including intercept covariates measurement_error_sd: Residual standard deviation (positive scalar) random_effect_sd: Random effect standard deviation (positive scalar) configurations Optional; provided, use spline configuration spline_baseline NULL, default initial values used (default: NULL). control list optimization algorithmic settings: method Optimization algorithm parameter estimation. Options include \"L-BFGS-B\", \"BFGS\", \"Nelder-Mead\" (default: \"L-BFGS-B\") maxit Maximum number iterations M-step optimization (default: 1000) em_maxit Maximum number EM algorithm iterations (default: 10) em_tol Convergence criterion EM algorithm based relative change log-likelihood (default: 1e-4) tol Numerical tolerance optimization convergence (default: 1e-2) verbose Controls diagnostic output: 0/FALSE silent operation, 1/TRUE iteration progress, 2 detailed parameter traces (default: FALSE) parallel Logical flag enabling parallel computation computationally intensive operations including posterior calculations, gradient evaluations, likelihood computations. Requires future future.apply packages (default: FALSE). n_cores Integer specifying number CPU cores parallel processing. NULL, automatically detects uses available cores minus one (default: NULL). ... Additional arguments passed internal optimization routines.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"S3 object class \"JointODE\" containing fitted model results: parameters list containing estimated parameters: coefficients: Named list baseline (B-spline coefficients baseline hazard), hazard (association survival covariate effects), acceleration (longitudinal fixed effects), measurement_error_sd (residual standard deviation), random_effect_sd (random effect standard deviation) configurations: Model configuration including spline basis specifications logLik Maximum log-likelihood value achieved convergence AIC Akaike Information Criterion model comparison BIC Bayesian Information Criterion adjusted sample size cindex Concordance index (C-index) measuring model's discrimination ability survival prediction convergence List containing convergence diagnostics: converged: Logical indicating convergence status em_iterations: Number EM iterations performed message: Descriptive convergence message random_effects List containing random effects estimates: estimates: Posterior means subject-specific random effects variances: Posterior variances random effects data Processed data used model fitting internal format control List control parameters used optimization call matched function call reproducibility","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"joint modeling framework integrates longitudinal survival processes shared random effects structure. longitudinal biomarker evolution characterized system ODEs can accommodate non-linear dynamics, feedback mechanisms, complex temporal patterns. survival component employs proportional hazards model instantaneous risk depends features derived longitudinal trajectory. Two association structures supported: Current value: hazard depends biomarker level time t Rate change: hazard depends biomarker's instantaneous slope Parameter estimation employs Expectation-Maximization (EM) algorithm : E-step: Adaptive Gauss-Hermite quadrature numerical integration M-step: Quasi-Newton optimization parameter updates","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"Data validation performed automatically informative error messages high-dimensional problems, parallel computation strongly recommended Convergence issues may arise sparse event data limited follow-Initial values computed using separate model fits provided","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"","code":"if (FALSE) { # \\dontrun{ fit <- JointODE(   longitudinal_formula = sim$formulas$longitudinal,   survival_formula = sim$formulas$survival,   longitudinal_data = sim$data$longitudinal_data,   survival_data = sim$data$survival_data ) summary(fit) } # }"},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"Computes gradients scalar-valued objective functions respect ODE parameters using adjoint sensitivity method. implementation requires analytical derivatives optimal performance accuracy.","code":""},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"","code":"adjoint(   ode_func,   jacobian_func,   x0,   params,   times,   data = NULL,   objective_func = NULL,   objective_grad = NULL,   running_cost = NULL,   running_cost_grad = NULL,   rtol = 1e-08,   atol = 1e-10,   method = \"lsoda\",   save_trajectory = FALSE )"},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"ode_func Function defining ODE system: function(t, x, params, data) returning list element 'dx' containing state derivatives dx/dt jacobian_func Required function providing analytical derivatives: function(t, x, params, data) returning list : df_dx: State Jacobian \\(\\partial f/\\partial x\\) (n_states × n_states matrix) df_dtheta: Parameter Jacobian \\(\\partial f/\\partial \\theta\\) (n_states × n_params matrix) x0 Initial state vector time t0 params Parameter vector \\(\\theta\\) compute sensitivities times Time grid ODE integration (must include t0 T) data Optional list containing constant auxiliary data objective_func Terminal cost function g(x(T), data) Returns scalar objective value final time objective_grad Required objective_func provided: function(x_final, data) returning gradient \\(\\partial g/\\partial x\\) final time running_cost Integrand function L(t, x, data) running cost Returns scalar cost rate time t running_cost_grad Required running_cost provided: function(t, x, data) returning gradient \\(\\partial L/\\partial x\\) rtol Relative error tolerance ODE solver (default: 1e-8) atol Absolute error tolerance ODE solver (default: 1e-10) method ODE solver algorithm (default: \"lsoda\" - adaptive solver) save_trajectory Whether return full state trajectory","code":""},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"Object class \"adjoint\" containing: objective Scalar value objective function J gradient Gradient vector \\(dJ/d\\theta\\) respect parameters final_state System state final time x(T) sensitivity_final Sensitivity matrix \\(\\partial x(T)/\\partial \\theta\\) final time trajectory Full state trajectory (save_trajectory = TRUE) n_states Number state variables n_params Number parameters times Time grid used integration","code":""},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"dynamical system described ordinary differential equations: $$dx/dt = f(t, x, \\theta, data)$$ $$x(t_0) = x_0$$ objective functional: $$J = g(x(T), data) + \\int_{t_0}^{T} L(t, x(t), data) dt$$ adjoint method efficiently computes gradient \\(dJ/d\\theta\\) solving: Forward ODE sensitivity equations (forward pass) Adjoint ODE backward time (running cost present) particularly efficient number parameters exceeds number objective functions.","code":""},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Parameter estimation for exponential decay  # Define the ODE system: dx/dt = -\\theta x ode_system <- function(t, x, params, data) {   list(dx = -params[1] * x) }  # Provide analytical Jacobians jacobians <- function(t, x, params, data) {   list(     df_dx = matrix(-params[1], 1, 1),      # \\partial f/\\partial x     df_dtheta = matrix(-x, 1, 1)           # \\partial f/\\partial \\theta   ) }  # Define objective: squared error from target target_value <- 0.5 objective <- function(x_final, data) {   (x_final - target_value)^2 }  # Gradient of objective objective_gradient <- function(x_final, data) {   2 * (x_final - target_value) }  # Compute sensitivity result <- adjoint(   ode_func = ode_system,   jacobian_func = jacobians,   x0 = 1,   params = 0.5,   times = seq(0, 2, length.out = 21),   objective_func = objective,   objective_grad = objective_gradient )  print(result) } # }"},{"path":"http://gongziyang.com/JointODE/reference/coef.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Coefficients — coef.JointODE","title":"Extract Model Coefficients — coef.JointODE","text":"Extract Model Coefficients","code":""},{"path":"http://gongziyang.com/JointODE/reference/coef.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Coefficients — coef.JointODE","text":"","code":"# S3 method for class 'JointODE' coef(object, ...)"},{"path":"http://gongziyang.com/JointODE/reference/coef.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Coefficients — coef.JointODE","text":"object JointODE object ... Additional arguments","code":""},{"path":"http://gongziyang.com/JointODE/reference/coef.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Coefficients — coef.JointODE","text":"Named numeric vector fixed effects coefficients","code":""},{"path":"http://gongziyang.com/JointODE/reference/logLik.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Log-Likelihood — logLik.JointODE","title":"Extract Log-Likelihood — logLik.JointODE","text":"Extract Log-Likelihood","code":""},{"path":"http://gongziyang.com/JointODE/reference/logLik.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Log-Likelihood — logLik.JointODE","text":"","code":"# S3 method for class 'JointODE' logLik(object, ...)"},{"path":"http://gongziyang.com/JointODE/reference/logLik.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Log-Likelihood — logLik.JointODE","text":"object JointODE object ... Additional arguments","code":""},{"path":"http://gongziyang.com/JointODE/reference/logLik.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Log-Likelihood — logLik.JointODE","text":"Log-likelihood df nobs attributes","code":""},{"path":"http://gongziyang.com/JointODE/reference/predict.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for JointODE Models — predict.JointODE","title":"Predict Method for JointODE Models — predict.JointODE","text":"Computes predictions biomarker trajectories, velocities, accelerations, survival functions fitted JointODE model. method uses fitted model parameters random effects solve ODE system generate predictions subject.","code":""},{"path":"http://gongziyang.com/JointODE/reference/predict.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for JointODE Models — predict.JointODE","text":"","code":"# S3 method for class 'JointODE' predict(object, times = NULL, parallel = FALSE, n_cores = NULL, ...)"},{"path":"http://gongziyang.com/JointODE/reference/predict.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for JointODE Models — predict.JointODE","text":"object fitted JointODE model object. times Optional numeric vector time points evaluate predictions. NULL, uses union observation times event time subject. parallel Logical flag parallel computation. Default FALSE. n_cores Number CPU cores parallel processing. NULL, uses available cores minus one. ... Additional arguments (currently unused).","code":""},{"path":"http://gongziyang.com/JointODE/reference/predict.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for JointODE Models — predict.JointODE","text":"list containing predictions subject, element contains: id Subject identifier times Time points predictions biomarker Predicted biomarker values random effects velocity Predicted biomarker velocity acceleration Predicted biomarker acceleration cumhazard Cumulative hazard values survival Survival probability values","code":""},{"path":"http://gongziyang.com/JointODE/reference/predict.JointODE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Method for JointODE Models — predict.JointODE","text":"prediction process involves: Using fitted model parameters random effects Solving ODE system subject specified time points Computing biomarker trajectories random effects included Calculating cumulative hazard survival probabilities Random effects fitted model always included predictions provide subject-specific trajectories.","code":""},{"path":"http://gongziyang.com/JointODE/reference/print.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Print JointODE Model — print.JointODE","title":"Print JointODE Model — print.JointODE","text":"Print JointODE Model","code":""},{"path":"http://gongziyang.com/JointODE/reference/print.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print JointODE Model — print.JointODE","text":"","code":"# S3 method for class 'JointODE' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"http://gongziyang.com/JointODE/reference/print.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print JointODE Model — print.JointODE","text":"x JointODE object digits Number digits numeric output ... Additional arguments","code":""},{"path":"http://gongziyang.com/JointODE/reference/print.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print JointODE Model — print.JointODE","text":"Invisibly returns object","code":""},{"path":"http://gongziyang.com/JointODE/reference/print.adjoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Adjoint Results — print.adjoint","title":"Print Method for Adjoint Results — print.adjoint","text":"Print Method Adjoint Results","code":""},{"path":"http://gongziyang.com/JointODE/reference/print.adjoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Adjoint Results — print.adjoint","text":"","code":"# S3 method for class 'adjoint' print(x, ...)"},{"path":"http://gongziyang.com/JointODE/reference/print.adjoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Adjoint Results — print.adjoint","text":"x object class \"adjoint\" ... Additional arguments (unused)","code":""},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Dataset for Joint Ordinary Differential Equation Modeling — sim","title":"Simulated Dataset for Joint Ordinary Differential Equation Modeling — sim","text":"pre-computed dataset comprising longitudinal biomarker trajectories time--event outcomes 200 simulated subjects. dataset generated using internal function .create_example_data() calls simulate default parameters seed = 123. biomarker trajectories follow damped harmonic oscillator model subject-specific initial conditions external forcing.","code":""},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Dataset for Joint Ordinary Differential Equation Modeling — sim","text":"","code":"sim"},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Dataset for Joint Ordinary Differential Equation Modeling — sim","text":"list two components: data list containing actual simulated data : longitudinal_data data frame containing longitudinal observations columns: id (subject identifier), time (measurement time), observed (biomarker error), biomarker (true value), velocity, acceleration, x1, x2 survival_data data frame containing survival information 200 subjects columns: id, time (event/censor), status (1=event, 0=censored), w1, w2, b (random effect) state 200 × 2 matrix containing initial conditions \\([m_i(0), \\dot{m}_i(0)]\\) subject init Initial parameter values model fitting containing coefficients configurations","code":""},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Dataset for Joint Ordinary Differential Equation Modeling — sim","text":"Generated via: sim <- .create_example_data()","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"data-generation-process","dir":"Reference","previous_headings":"","what":"Data Generation Process","title":"Simulated Dataset for Joint Ordinary Differential Equation Modeling — sim","text":"Generated using .create_example_data(n_subjects = 200, seed = 123), follow-period 0 10 time units shared random effect \\(b_i \\sim \\mathcal{N}(0, 0.01)\\) (sd = 0.1).","code":""},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"model-specification","dir":"Reference","previous_headings":"","what":"Model Specification","title":"Simulated Dataset for Joint Ordinary Differential Equation Modeling — sim","text":"Longitudinal Sub-model (Damped Harmonic Oscillator): biomarker trajectory follows: $$\\ddot{m}_i(t) + 2\\xi\\omega\\dot{m}_i(t) + \\omega^2 m_i(t) =       k\\omega^2[f_0 + \\mathbf{X}_i^T\\boldsymbol{\\beta}_{exc}]$$ parameters: Damping ratio: \\(\\xi = 0.707\\) (slightly underdamped) Natural period: \\(T = 5\\), giving \\(\\omega = 2\\pi/5\\) Excitation amplitude: \\(k = 1.0\\) Excitation offset: \\(f_0 = 0.0\\) Excitation coefficients: \\(\\boldsymbol{\\beta}_{exc} = (0.8, -0.5)^T\\) Initial conditions: $$m_i(0) = -3.0 + \\mathbf{X}_i^T\\boldsymbol{\\beta}_{init},       \\quad \\dot{m}_i(0) = 0$$ \\(\\boldsymbol{\\beta}_{init} = (0.1, -0.1)^T\\). Observed measurements: $$y_{ij} = m_i(t_{ij}) + b_i + \\epsilon_{ij},       \\quad \\epsilon_{ij} \\sim \\mathcal{N}(0, 0.01)$$ Survival Sub-model: $$\\lambda_i(t) = \\frac{1.5}{8}\\left(\\frac{t}{8}\\right)^{0.5}       \\exp(0.3m_i(t) + 1.0\\dot{m}_i(t) +       \\mathbf{W}_i^T\\boldsymbol{\\phi} + b_i)$$ \\(\\boldsymbol{\\phi} = (0.4, -0.6)^T\\) covariates w1 w2.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated Dataset for Joint Ordinary Differential Equation Modeling — sim","text":"","code":"# Load the simulated dataset data(sim)  # Explore the data structure str(sim$data, max.level = 2) #> List of 3 #>  $ longitudinal_data:'data.frame':\t1222 obs. of  8 variables: #>   ..$ id          : int [1:1222] 1 1 2 3 3 3 3 3 3 3 ... #>   ..$ time        : num [1:1222] 0 1 0 0 1 2 3 4 5 6 ... #>   ..$ observed    : num [1:1222] -2.788 -0.688 -2.777 -2.817 -1.441 ... #>   ..$ biomarker   : num [1:1222] -2.773 -0.847 -2.752 -2.963 -1.67 ... #>   ..$ velocity    : num [1:1222] 0 2.59 0 0 1.74 ... #>   ..$ acceleration: num [1:1222] 7.214 -0.432 6.926 4.845 -0.29 ... #>   ..$ x1          : num [1:1222] 2.199 2.199 1.312 -0.265 -0.265 ... #>   ..$ x2          : num [1:1222] -0.0736 -0.0736 -1.1687 -0.6347 -0.6347 ... #>  $ survival_data    :'data.frame':\t200 obs. of  6 variables: #>   ..$ id    : int [1:200] 1 2 3 4 5 6 7 8 9 10 ... #>   ..$ time  : num [1:200] 1.203 0.816 10 10 8.23 ... #>   ..$ status: int [1:200] 1 1 0 0 1 1 1 0 0 1 ... #>   ..$ w1    : num [1:200] 1.074 -0.0273 -0.0333 -1.5161 0.7904 ... #>   ..$ w2    : int [1:200] 1 0 0 1 1 0 1 0 1 0 ... #>   ..$ b     : num [1:200] -0.05605 -0.02302 0.15587 0.00705 0.01293 ... #>  $ state            :'data.frame':\t200 obs. of  2 variables: #>   ..$ biomarker: num [1:200] -2.77 -2.75 -2.96 -2.94 -3.11 ... #>   ..$ velocity : num [1:200] 0 0 0 0 0 0 0 0 0 0 ...  # Summary statistics for longitudinal data summary(sim$data$longitudinal_data[, c(\"biomarker\", \"velocity\")]) #>    biomarker          velocity          #>  Min.   :-3.3481   Min.   :-0.1031616   #>  1st Qu.:-1.8754   1st Qu.:-0.0142966   #>  Median :-0.8318   Median : 0.0009752   #>  Mean   :-0.9259   Mean   : 0.3657269   #>  3rd Qu.: 0.0146   3rd Qu.: 0.6437167   #>  Max.   : 2.5709   Max.   : 2.8659699    # Check event rate mean(sim$data$survival_data$status) #> [1] 0.675  # Visualize biomarker trajectories for first 10 subjects library(ggplot2) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  sim$data$longitudinal_data %>%   filter(id <= 10) %>%   ggplot(aes(x = time, y = biomarker, group = id)) +   geom_line(alpha = 0.7) +   geom_point(aes(y = observed), size = 0.5, alpha = 0.5) +   facet_wrap(~id, scales = \"free_y\") +   theme_minimal() +   labs(title = \"Biomarker Trajectories (True and Observed)\",        x = \"Time\", y = \"Biomarker Value\") #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic?   # Survival analysis library(survival)  # Kaplan-Meier curve km_fit <- survfit(Surv(time, status) ~ 1, data = sim$data$survival_data) plot(km_fit, main = \"Kaplan-Meier Survival Curve\",      xlab = \"Time\", ylab = \"Survival Probability\")   # Examine relationship between initial biomarker and survival sim$data$survival_data$initial_biomarker <- sim$data$state[, \"biomarker\"] cox_fit <- coxph(Surv(time, status) ~ w1 + w2, data = sim$data$survival_data) summary(cox_fit) #> Call: #> coxph(formula = Surv(time, status) ~ w1 + w2, data = sim$data$survival_data) #>  #>   n= 200, number of events= 135  #>  #>        coef exp(coef) se(coef)      z Pr(>|z|)     #> w1  0.34810   1.41638  0.08657  4.021 5.79e-05 *** #> w2 -0.32229   0.72449  0.17343 -1.858   0.0631 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #>    exp(coef) exp(-coef) lower .95 upper .95 #> w1    1.4164      0.706    1.1953     1.678 #> w2    0.7245      1.380    0.5157     1.018 #>  #> Concordance= 0.6  (se = 0.025 ) #> Likelihood ratio test= 18.64  on 2 df,   p=9e-05 #> Wald test            = 18.21  on 2 df,   p=1e-04 #> Score (logrank) test = 18.43  on 2 df,   p=1e-04 #>   # Verify ODE dynamics - compare numerical solution with data # Extract parameters used in simulation omega <- 2 * pi / 5  # Natural frequency xi <- 0.707          # Damping ratio  # Check phase space (velocity vs biomarker) subject_5 <- sim$data$longitudinal_data[   sim$data$longitudinal_data$id == 5, ] plot(subject_5$biomarker, subject_5$velocity,      type = \"l\", main = \"Phase Portrait (Subject 5)\",      xlab = \"Biomarker\", ylab = \"Velocity\") points(subject_5$biomarker[1], subject_5$velocity[1],        col = \"red\", pch = 16, cex = 1.5) legend(\"topright\", c(\"Trajectory\", \"Initial State\"),        col = c(\"black\", \"red\"), pch = c(NA, 16), lty = c(1, NA))"},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Data from a Joint Ordinary Differential Equation Model — simulate","title":"Simulate Data from a Joint Ordinary Differential Equation Model — simulate","text":"Generates synthetic longitudinal time--event data joint modeling framework longitudinal biomarker trajectory follows damped harmonic oscillator model (second-order ODE), survival process associated biomarker dynamics shared random effects trajectory-dependent hazard functions. biomarker dynamics parameterized using physically interpretable parameters: damping ratio, natural period, excitation amplitude.","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Data from a Joint Ordinary Differential Equation Model — simulate","text":"","code":"simulate(   n_subjects = 200,   shared_sd = 0.1,   longitudinal = list(xi = 0.707, period = 5, k = 1, excitation = list(offset = 0,     covariates = c(x1 = 0.8, x2 = -0.5)), initial = list(offset = -3, covariates = c(x1 =     0.1, x2 = -0.1), random_coef = 0), error_sd = 0.1, n_measurements = 10),   survival = list(baseline = list(type = \"weibull\", shape = 1.5, scale = 8), value = 0.3,     slope = 1, covariates = c(w1 = 0.4, w2 = -0.6)),   covariates = list(x1 = list(type = \"normal\", mean = 0, sd = 1), x2 = list(type =     \"normal\", mean = 0, sd = 1), w1 = list(type = \"normal\", mean = 0, sd = 1), w2 =     list(type = \"binary\", prob = 0.5)),   maxt = 10,   seed = 42 )"},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Data from a Joint Ordinary Differential Equation Model — simulate","text":"n_subjects Integer specifying number subjects simulate (default: 200) shared_sd Positive scalar defining standard deviation shared random effects, \\(\\sigma_b\\) (default: 0.1) longitudinal List specifying longitudinal sub-model parameters: xi Damping ratio \\(\\xi\\) controlling oscillation decay. Values: \\(\\xi < 1\\) (underdamped), \\(\\xi = 1\\) (critically damped), \\(\\xi > 1\\) (overdamped) (default: 0.707, slightly underdamped) period Natural period \\(T\\) oscillation time units, related natural frequency \\(\\omega = 2\\pi/T\\) (default: 5) k Excitation amplitude scaling factor \\(k\\) modulates strength external forcing (default: 1.0) excitation List specifying external forcing parameters: offset Constant excitation term \\(f_0\\) (default: 0.0) covariates Named vector covariate effects \\(\\boldsymbol{\\beta}_{exc}\\) excitation (default: c(x1 = 0.8, x2 = -0.5)) initial List specifying initial condition parameters: offset Baseline initial biomarker value \\(\\mu_0\\) (default: -3.0) covariates Named vector covariate effects \\(\\boldsymbol{\\beta}_{init}\\) initial biomarker level (default: c(x1 = 0.1, x2 = -0.1)) random_coef Scaling coefficient \\(\\psi\\) random effect influence initial conditions (default: 0.0) error_sd Standard deviation \\(\\sigma_{\\epsilon}\\) measurement error process (default: 0.1) n_measurements Number longitudinal measurements per subject (default: 10) survival List specifying survival sub-model parameters: baseline List defining Weibull baseline hazard function: type Character string specifying baseline hazard type (currently \"weibull\" supported) shape Weibull shape parameter \\(\\kappa > 0\\) (default: 1.5) scale Weibull scale parameter \\(\\lambda > 0\\) (default: 8.0) value Association parameter \\(\\alpha_1\\) linking current biomarker value hazard (default: 0.3) slope Association parameter \\(\\alpha_2\\) linking biomarker velocity hazard (default: 1.0) covariates Named vector regression coefficients \\(\\boldsymbol{\\phi}\\) survival covariates (default: c(w1 = 0.4, w2 = -0.6)) covariates List defining distributions baseline covariates: x1 List type = \"normal\", mean = 0, sd = 1 standardized continuous covariate (longitudinal) x2 List type = \"normal\", mean = 0, sd = 1 standardized continuous covariate (longitudinal) w1 List type = \"normal\", mean = 0, sd = 1 standardized continuous covariate (survival) w2 List type = \"binary\" prob = 0.5 binary covariate (survival) maxt Positive scalar specifying maximum follow-time study (default: 10 time units) seed Integer seed random number generation ensure reproducibility (default: 42)","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Data from a Joint Ordinary Differential Equation Model — simulate","text":"list containing three components: longitudinal_data Data frame comprising longitudinal observations columns: id: Subject identifier (integer) time: Observation time point (numeric) observed: Measured biomarker value including measurement error, \\(y_{ij}\\) biomarker: True underlying biomarker value, \\(m_i(t_{ij})\\) velocity: First derivative biomarker trajectory, \\(\\dot{m}_i(t_{ij})\\) acceleration: Second derivative biomarker trajectory, \\(\\ddot{m}_i(t_{ij})\\) x1, x2, x3: Time-invariant covariates survival_data Data frame containing time--event data columns: id: Subject identifier time: Observed event censoring time, \\(T_i\\) status: Event indicator, \\(\\delta_i\\) (1 = event observed, 0 = censored) b: Realized subject-specific random effect, \\(b_i\\) x1, x2, x3: Baseline covariate values state \\(n \\times 2\\) matrix containing initial states \\([m_i(0), \\dot{m}_i(0)]\\) subject","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Data from a Joint Ordinary Differential Equation Model — simulate","text":"simulation framework implements joint model comprising longitudinal survival sub-models linked shared random effects trajectory-dependent associations.","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"longitudinal-sub-model","dir":"Reference","previous_headings":"","what":"Longitudinal Sub-model","title":"Simulate Data from a Joint Ordinary Differential Equation Model — simulate","text":"biomarker trajectory \\(m_i(t)\\) subject \\(\\) follows damped harmonic oscillator external forcing: $$\\ddot{m}_i(t) + 2\\xi\\omega\\dot{m}_i(t) + \\omega^2 m_i(t) =   k \\omega^2 [f_0 + \\mathbf{X}_i^T\\boldsymbol{\\beta}_{exc}]$$ : \\(\\omega = 2\\pi/T\\) natural angular frequency \\(\\xi\\) damping ratio determining oscillation behavior \\(k\\) scales excitation amplitude \\(f_0\\) constant excitation term \\(\\mathbf{X}_i\\) contains time-invariant covariates \\(\\boldsymbol{\\beta}_{exc}\\) represents covariate effects excitation Initial conditions specified : \\(m_i(0) = \\mu_0 + \\mathbf{X}_i^T\\boldsymbol{\\beta}_{init} + \\psi b_i\\) \\(\\dot{m}_i(0) = 0\\) (zero initial velocity) observed longitudinal measurements incorporate additive Gaussian noise: $$y_{ij} = m_i(t_{ij}) + b_i + \\epsilon_{ij}$$ \\(\\epsilon_{ij} \\sim \\mathcal{N}(0, \\sigma_\\epsilon^2)\\) represents independent measurement error.","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"survival-sub-model","dir":"Reference","previous_headings":"","what":"Survival Sub-model","title":"Simulate Data from a Joint Ordinary Differential Equation Model — simulate","text":"instantaneous hazard function incorporates current biomarker value velocity: $$\\lambda_i(t) = \\lambda_0(t)\\exp(\\alpha_1 m_i(t) + \\alpha_2\\dot{m}_i(t)  + \\mathbf{W}_i^T\\boldsymbol{\\phi} + b_i)$$ : \\(\\lambda_0(t)\\) denotes Weibull baseline hazard: \\(\\lambda_0(t) = (k/\\lambda)(t/\\lambda)^{k-1}\\) \\(\\alpha_1\\) quantifies association current biomarker value \\(\\alpha_2\\) quantifies association biomarker velocity \\(\\mathbf{W}_i\\) contains baseline covariates \\(\\boldsymbol{\\phi}\\) represents covariate effects survival","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"random-effects-structure","dir":"Reference","previous_headings":"","what":"Random Effects Structure","title":"Simulate Data from a Joint Ordinary Differential Equation Model — simulate","text":"Subject-specific random effects \\(b_i \\sim \\mathcal{N}(0, \\sigma_b^2)\\) induce correlation longitudinal survival processes : Initial biomarker level via \\(m_i(0)\\) Hazard function via frailty term Longitudinal observations via additive shift","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Data from a Joint Ordinary Differential Equation Model — simulate","text":"","code":"# Generate a small dataset with default parameters sim_data <- simulate(n_subjects = 50, seed = 123)  # Examine the structure of generated data str(sim_data) #> List of 3 #>  $ longitudinal_data:'data.frame':\t238 obs. of  8 variables: #>   ..$ id          : int [1:238] 1 1 2 2 2 2 2 2 2 2 ... #>   ..$ time        : num [1:238] 0 1 0 1 2 3 4 5 6 7 ... #>   ..$ observed    : num [1:238] -2.981 -1.629 -3.08 -1.785 -0.478 ... #>   ..$ biomarker   : num [1:238] -2.904 -1.444 -3.029 -1.816 -0.528 ... #>   ..$ velocity    : num [1:238] 0 1.964 0 1.632 0.846 ... #>   ..$ acceleration: num [1:238] 5.466 -0.327 4.544 -0.272 -0.91 ... #>   ..$ x1          : num [1:238] 0.2533 0.2533 -0.0285 -0.0285 -0.0285 ... #>   ..$ x2          : num [1:238] -0.71 -0.71 0.257 0.257 0.257 ... #>  $ survival_data    :'data.frame':\t50 obs. of  6 variables: #>   ..$ id    : int [1:50] 1 2 3 4 5 6 7 8 9 10 ... #>   ..$ time  : num [1:50] 1.19 8.13 10 10 9.35 ... #>   ..$ status: int [1:50] 1 1 0 0 1 1 0 1 1 0 ... #>   ..$ w1    : num [1:50] 0.788 0.769 0.332 -1.008 -0.119 ... #>   ..$ w2    : int [1:50] 1 0 1 1 0 0 1 0 0 1 ... #>   ..$ b     : num [1:50] -0.05605 -0.02302 0.15587 0.00705 0.01293 ... #>  $ state            :'data.frame':\t50 obs. of  2 variables: #>   ..$ biomarker: num [1:50] -2.9 -3.03 -2.98 -2.83 -2.93 ... #>   ..$ velocity : num [1:50] 0 0 0 0 0 0 0 0 0 0 ...  if (FALSE) { # \\dontrun{ # Customized simulation with underdamped oscillator sim_data <- simulate(   n_subjects = 200,   longitudinal = list(     xi = 0.3,          # Low damping (more oscillatory)     period = 3,        # Faster oscillations     k = 1.5,           # Stronger excitation     excitation = list(       offset = 0.5,       covariates = c(x1 = 1.0, x2 = -0.3)     ),     initial = list(       offset = 0.0,    # Start at equilibrium       covariates = c(x1 = 0.5, x2 = -0.2),       random_coef = 0.5     ),     error_sd = 0.2     # Moderate measurement error   ) )  # Overdamped system (no oscillations) sim_data_overdamped <- simulate(   n_subjects = 100,   longitudinal = list(     xi = 2.0,          # Overdamped (exponential decay)     period = 10,       # Slow dynamics     k = 0.5,           # Weak excitation     excitation = list(       offset = -1.0,       covariates = c(x1 = 0.2, x2 = 0.1)     )   ) ) } # }"},{"path":"http://gongziyang.com/JointODE/reference/summary.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of JointODE Model — summary.JointODE","title":"Summary of JointODE Model — summary.JointODE","text":"Summary JointODE Model","code":""},{"path":"http://gongziyang.com/JointODE/reference/summary.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of JointODE Model — summary.JointODE","text":"","code":"# S3 method for class 'JointODE' summary(object, ...)"},{"path":"http://gongziyang.com/JointODE/reference/summary.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of JointODE Model — summary.JointODE","text":"object JointODE object ... Additional arguments","code":""},{"path":"http://gongziyang.com/JointODE/reference/summary.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of JointODE Model — summary.JointODE","text":"summary.JointODE object coefficients test statistics","code":""},{"path":"http://gongziyang.com/JointODE/reference/vcov.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Variance-Covariance Matrix — vcov.JointODE","title":"Extract Variance-Covariance Matrix — vcov.JointODE","text":"Extract Variance-Covariance Matrix","code":""},{"path":"http://gongziyang.com/JointODE/reference/vcov.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Variance-Covariance Matrix — vcov.JointODE","text":"","code":"# S3 method for class 'JointODE' vcov(object, ...)"},{"path":"http://gongziyang.com/JointODE/reference/vcov.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Variance-Covariance Matrix — vcov.JointODE","text":"object JointODE object ... Additional arguments","code":""},{"path":"http://gongziyang.com/JointODE/reference/vcov.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Variance-Covariance Matrix — vcov.JointODE","text":"Variance-covariance matrix fixed effects","code":""}]

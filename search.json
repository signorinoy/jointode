[{"path":[]},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement meetziyang@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://gongziyang.com/JointODE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Ziyang Gong Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"simulation-setup","dir":"Articles","previous_headings":"","what":"Simulation Setup","title":"Comparison","text":"sim dataset generated using joint ODE framework following structure: Longitudinal Process: observed biomarker measurements : v_{ij} = m_i(t_{ij}) + b_i + \\epsilon_{ij} true biomarker trajectory m_i(t) evolves according : \\ddot{m}_i(t) = \\beta_1 m_i(t) + \\beta_2 \\dot{m}_i(t) + \\beta_3 + \\beta_4 x_{i1} + \\beta_5 x_{i2} b_i \\sim \\mathcal{N}(0, \\sigma_b^2) (random intercept) \\epsilon_{ij} \\sim \\mathcal{N}(0, \\sigma_e^2) (measurement error). Survival Process: hazard function incorporates biomarker dynamics: \\lambda_i(t) = \\lambda_0(t) \\exp\\{\\alpha_1 m_i(t) + \\alpha_2 \\dot{m}_i(t) + \\phi_1 w_{i1} + \\phi_2 w_{i2} + b_i\\} \\lambda_0(t)=8 baseline hazard \\alpha = (\\alpha_1, \\alpha_2) captures association biomarker value velocity.","code":"#> True Parameters: #>   Hazard: α = [0.3, 0.7], φ = [0.4, -0.6] #>   ODE: β = [-0.6, -0.4, 0.3, -0.8, 0.5] #>   Variance: σ_e = 0.1, σ_b = 0.1 #>  #> Dataset: 100 subjects, 1529 observations, 73% events"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"ode-dynamics","dir":"Articles","previous_headings":"Simulation Setup","what":"ODE Dynamics","title":"Comparison","text":"left panel shows complete ODE dynamics four randomly selected subjects, illustrating biomarker value, velocity, acceleration evolve time. right panel demonstrates impact random intercept measurement error comparing true biomarker trajectories (lines) observed measurements (points). variance hierarchy correlation structure reflect fundamental properties ODE system. Unlike independent variables traditional models, components mechanistically linked differential equations, creating intrinsic dependencies capture true dynamics biomarker evolution.","code":"#> Variance Components: #>   Biomarker: 0.980 #>   Velocity: 0.176 #>   Acceleration: 0.138 #>  #> Pairwise Correlations: #>   ρ(Biomarker, Velocity): 0.372 #>   ρ(Biomarker, Acceleration): -0.152 #>   ρ(Velocity, Acceleration): 0.255"},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"survival-distribution","dir":"Articles","previous_headings":"Simulation Setup","what":"Survival Distribution","title":"Comparison","text":"survival curve shows overall event pattern simulated dataset, shaded area representing 95% confidence interval.","code":""},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"model-comparison","dir":"Articles","previous_headings":"","what":"Model Comparison","title":"Comparison","text":"compare proposed method existing approaches: Oracle model uses true biomarker trajectory, derivatives, random effects observed time points. perfect information, approximates time-varying covariates using piecewise linear interpolation rather modeling continuous ODE dynamics. Based 200 simulation replicates, evaluate estimation accuracy association parameters (\\alpha_1, \\alpha_2) baseline covariate effects (\\phi_1, \\phi_2) using Bias, Empirical Standard Error (ESE), Average Standard Error (ASE), Coverage Probability (CP) 95% confidence intervals. Simulation Results simulation results demonstrate good estimation accuracy joint ODE-Cox model across different sample sizes. n=400, JointODE method yields minimal biases association parameters \\alpha_1 \\alpha_2, well baseline covariate effects \\phi_1 \\phi_2. coverage probabilities remain close nominal 95% level, indicating proper uncertainty quantification.","code":""},{"path":"http://gongziyang.com/JointODE/articles/comparison.html","id":"appendix","dir":"Articles","previous_headings":"","what":"Appendix","title":"Comparison","text":"","code":"# Data preparation for comparison models jsm_data <- dataPreprocess(   long = long_data %>% rename(ID = id),   surv = surv_data %>% rename(ID = id, survtime = time),   id.col = \"ID\",   long.time.col = \"time\",   surv.time.col = \"survtime\",   surv.event.col = \"status\" ) %>%   rename(     obstime = time,     start = start.join,     stop = stop.join,     event = event.join   )  #-------------------------------------------- # Model 1: JointODE (Proposed Method) #-------------------------------------------- fit_jointode <- JointODE(   longitudinal_formula = sim$formulas$longitudinal,   survival_formula = sim$formulas$survival,   longitudinal_data = sim$data$longitudinal_data,   survival_data = sim$data$survival_data )  #-------------------------------------------- # Model 2: Traditional Joint Model (JSM) #-------------------------------------------- # Step 1: Longitudinal sub-model fit_lme <- lme(   v ~ obstime + x1 + x2,   random = ~ 1 | ID,   data = jsm_data )  # Step 2: Survival sub-model fit_cox <- coxph(   Surv(start, stop, event) ~ w1 + w2,   data = jsm_data, x = TRUE )  # Step 3: Joint model fit_jsm <- jmodelTM(   fit_lme, fit_cox,   data = jsm_data,   timeVarY = \"obstime\" )  #-------------------------------------------- # Model 3: Time-varying Cox (Oracle - Theoretical Benchmark) #-------------------------------------------- fit_oracle <- coxph(   Surv(start, stop, event) ~ w1 + w2 + biomarker + velocity  +     offset(b) + cluster(ID),   data = jsm_data )"},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"longitudinal-sub-model","dir":"Articles","previous_headings":"Model Framework","what":"Longitudinal Sub-Model","title":"Technical Details","text":"observed biomarker measurements modeled : V_{ij}=m_i(T_{ij})+b_i+\\varepsilon_{ij},\\quad =1,\\ldots,n,\\quad j=1,\\ldots,n_i : V_{ij}: Observed biomarker value subject time T_{ij} m_i(t): True underlying biomarker trajectory b_i\\sim\\mathcal{N}(0,\\sigma_{b}^{2}): Subject-specific random intercept \\varepsilon_{ij}\\sim\\mathcal{N}(0,\\sigma_{e}^{2}): Measurement error biomarker trajectory evolution characterized following second-order differential equation: \\ddot{m}_i(t) = f\\big(m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t), t\\big) f: \\mathbb{R} \\times \\mathbb{R} \\times \\mathbb{R}^p \\times \\mathbb{R}^+ \\\\mathbb{R} smooth function modeling biomarker acceleration function current value m_i(t), velocity \\dot{m}_i(t), time-varying covariates \\mathbf{X}_i(t) \\\\mathbb{R}^p, time t.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"survival-sub-model","dir":"Articles","previous_headings":"Model Framework","what":"Survival Sub-Model","title":"Technical Details","text":"hazard function incorporates biomarker dynamics: \\lambda_i(t) = \\lambda_{0}(t)\\exp\\left[\\mathbf{W}_i^{\\top}\\boldsymbol{\\phi}+\\mathbf{m}_i(t)^{\\top}\\boldsymbol{\\alpha}+b_{}\\right] : \\lambda_{0}(t): Baseline hazard (e.g., Weibull, piecewise constant) \\mathbf{m}_i(t)=\\left(m_i(t), \\dot{m}_i(t)\\right)^{\\top}: Biomarker value derivatives \\boldsymbol{\\alpha}=(\\alpha_1, \\alpha_2)^{\\top}: Association parameters value velocity \\mathbf{W}_i: Baseline covariates coefficients \\boldsymbol{\\phi} b_i: Subject-specific random intercept","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"ode-system","dir":"Articles","previous_headings":"Model Framework","what":"ODE System","title":"Technical Details","text":"complete system couples biomarker trajectory dynamics survival process. state vector \\mathbf{s}_i(t) = (\\Lambda_i(t), m_i(t), \\dot{m}_i(t))^{\\top} evolves according : \\frac{d\\mathbf{s}_i}{dt} = \\begin{pmatrix} \\lambda_i(t|b_i) \\\\ \\dot{m}_i(t) \\\\ f(m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t), t) \\end{pmatrix} initial conditions \\mathbf{s}_i(0) = (0, m_{i0}, \\dot{m}_{i0})^{\\top}, m_{i0} \\dot{m}_{i0} initial biomarker value velocity subject .","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"statistical-inference","dir":"Articles","previous_headings":"","what":"Statistical Inference","title":"Technical Details","text":"parameter estimation, need specify parametric forms model components.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"model-parameterization","dir":"Articles","previous_headings":"Statistical Inference","what":"Model Parameterization","title":"Technical Details","text":"Hazard Function: parameterize log baseline hazard using B-splines: \\log\\lambda_0(t) = \\boldsymbol{\\eta}^{\\top} \\mathbf{B}^{(\\lambda)}(t) Thus, full hazard function becomes: \\lambda_i(t|b_i) = \\exp\\left[\\boldsymbol{\\eta}^{\\top} \\mathbf{B}^{(\\lambda)}(t) + \\mathbf{W}_i^{\\top}\\boldsymbol{\\phi} + \\mathbf{m}_i(t)^{\\top}\\boldsymbol{\\alpha} + b_{}\\right] \\mathbf{B}^{(\\lambda)}(t) B-spline basis log baseline hazard, \\boldsymbol{\\eta} corresponding coefficients. Acceleration Function: make model tractable, approximate unknown acceleration function f using linear model: f(m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t), t) \\approx \\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t) : \\mathbf{Z}_i(t) = [m_i(t), \\dot{m}_i(t), \\mathbf{X}_i^{\\top}(t), t]^{\\top} feature vector \\boldsymbol{\\beta} linear coefficients (constraints needed)","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"likelihood","dir":"Articles","previous_headings":"Statistical Inference","what":"Likelihood","title":"Technical Details","text":"joint likelihood subject integrates random effect: L_i(\\boldsymbol{\\theta}) = \\int p(\\mathbf{V}_i | b_i) \\cdot p(T_i, \\delta_i | b_i) \\cdot p(b_i) \\, db_i \\boldsymbol{\\theta} = (\\boldsymbol{\\eta}, \\boldsymbol{\\phi}, \\boldsymbol{\\alpha}, \\boldsymbol{\\beta}, \\sigma_e^2, \\sigma_b^2). Likelihood Components: Longitudinal: p(\\mathbf{V}_i | b_i) = \\prod_{j=1}^{n_i} \\mathcal{N}(V_{ij}; m_i(T_{ij}) + b_i, \\sigma_e^2) Survival: p(T_i, \\delta_i | b_i) = [\\lambda_i(T_i|b_i)]^{\\delta_i} \\exp[-\\Lambda_i(T_i|b_i)] Random Effect: p(b_i) \\sim \\mathcal{N}(0, \\sigma_b^2)","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"parameter-estimation","dir":"Articles","previous_headings":"Statistical Inference","what":"Parameter Estimation","title":"Technical Details","text":"linear acceleration model, use direct gradient-based optimization marginal likelihood.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"posterior-computation","dir":"Articles","previous_headings":"Statistical Inference > Parameter Estimation","what":"Posterior Computation","title":"Technical Details","text":"subject , compute posterior distribution b_i given observed data \\mathcal{O}_i. Key simplification: hazard cumulative hazard factor : \\lambda_i(t|b_i) = e^{b_i} \\lambda_i(t|0) \\Lambda_i(t|b_i) = e^{b_i} \\Lambda_i(t|0) Implementation: Solve baseline ODE b_i = 0 obtain m_i(t), \\lambda_i(t|0), \\Lambda_i(T_i|0) Find posterior mode \\tilde{b}_i maximizing: \\ell_i(b) = b\\left[\\frac{S_i}{\\sigma_e^2} + \\delta_i\\right] - \\frac{b^2}{2}\\left[\\frac{n_i}{\\sigma_e^2} + \\frac{1}{\\sigma_b^2}\\right] - e^b\\Lambda_i(T_i|0) S_i = \\sum_j(V_{ij} - m_i(T_{ij})) Mean: \\hat{b}_i = E[b_i|\\mathcal{O}_i] Variance: \\hat{v}_i = \\text{Var}[b_i|\\mathcal{O}_i] Transform: E[e^{b_i}|\\mathcal{O}_i] survival updates","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"objective-function","dir":"Articles","previous_headings":"Statistical Inference > Parameter Estimation","what":"Objective Function","title":"Technical Details","text":"maximize expected complete-data log-likelihood: Q(\\boldsymbol{\\theta}) = Q_{\\text{long}} + Q_{\\text{surv}} + Q_{\\text{RE}} : Q_{\\text{long}} = -\\frac{1}{2\\sigma_e^2}\\sum_{,j} [(V_{ij} - m_i(T_{ij}) - \\hat{b}_i)^2 + \\hat{v}_i] - \\frac{N}{2}\\log(2\\pi\\sigma_e^2), N = \\sum_{=1}^n n_i total number observations Q_{\\text{surv}} = \\sum_i [\\delta_i(\\log\\lambda_i(T_i|0) + \\hat{b}_i) - E[e^{b_i}|\\mathcal{O}_i]\\Lambda_i(T_i|0)] Q_{\\text{RE}} = -\\frac{1}{2\\sigma_b^2}\\sum_i (\\hat{b}_i^2 + \\hat{v}_i) - \\frac{n}{2}\\log(2\\pi\\sigma_b^2) Optimization Strategy: optimize parameters \\boldsymbol{\\theta} using gradient-based methods: \\hat{\\boldsymbol{\\theta}} = \\arg\\max_{\\boldsymbol{\\theta}} Q(\\boldsymbol{\\theta}) variance components updated using closed-form expressions:  \\sigma_e^2 = \\frac{1}{N}\\sum_{,j}[(V_{ij} - m_i(T_{ij}) - \\hat{b}_i)^2 + \\hat{v}_i],\\quad\\sigma_b^2 = \\frac{1}{n}\\sum_i(\\hat{b}_i^2 + \\hat{v}_i)","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"overview-of-gradient-computation","dir":"Articles","previous_headings":"Computational Details","what":"Overview of Gradient Computation","title":"Technical Details","text":"optimization requires maximization expected complete-data log-likelihood Q(\\boldsymbol{\\theta}) respect parameter vector \\boldsymbol{\\theta} = (\\boldsymbol{\\eta}, \\boldsymbol{\\phi}, \\boldsymbol{\\alpha}, \\boldsymbol{\\beta}, \\sigma_e^2, \\sigma_b^2). perform optimization efficiently, gradient-based methods necessitate computation : \\nabla_{\\boldsymbol{\\theta}} Q = \\sum_{=1}^{n}\\sum_{j=1}^{n_i} \\frac{r_{ij}}{\\sigma_e^2} \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\theta}} + \\sum_{=1}^{n} \\left[\\delta_i \\frac{\\partial \\log\\lambda_i(T_i|0)}{\\partial \\boldsymbol{\\theta}} - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial \\Lambda_i(T_i|0)}{\\partial \\boldsymbol{\\theta}}\\right] r_{ij} = V_{ij} - m_i(T_{ij}) - \\hat{b}_i denotes residual observed fitted longitudinal values. gradient formula reveals fundamental computational challenge: must evaluate sensitivities biomarker trajectory m_i(t) hazard functions respect model parameters. Specifically, require: \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\theta}}: trajectory sensitivities observation times \\frac{\\partial \\log\\lambda_i(T_i|0)}{\\partial \\boldsymbol{\\theta}}: log hazard sensitivities event times \\frac{\\partial \\Lambda_i(T_i|0)}{\\partial \\boldsymbol{\\theta}}: cumulative hazard sensitivities event times sensitivities depend solution nonlinear second-order ODE system derived closed form. first present explicit forms gradients, discuss numerical methods computation.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"explicit-forms-of-gradient-components","dir":"Articles","previous_headings":"Computational Details","what":"Explicit Forms of Gradient Components","title":"Technical Details","text":"parameter vector \\boldsymbol{\\theta} = (\\boldsymbol{\\eta}, \\boldsymbol{\\phi}, \\boldsymbol{\\alpha}, \\boldsymbol{\\beta}) includes hazard model parameters linear acceleration coefficients. derive gradient respect component.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"gradient-components","dir":"Articles","previous_headings":"Computational Details > Explicit Forms of Gradient Components","what":"Gradient Components","title":"Technical Details","text":"gradient components decompose follows: Baseline hazard coefficients (\\boldsymbol{\\eta}): \\nabla_{\\boldsymbol{\\eta}} Q = \\sum_{=1}^{n} \\left[\\delta_i \\mathbf{B}^{(\\lambda)}(T_i) - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\eta}}\\right] Baseline covariate effects (\\boldsymbol{\\phi}): \\nabla_{\\boldsymbol{\\phi}} Q = \\sum_{=1}^{n} \\left[\\delta_i - E[e^{b_i}|\\mathcal{O}_i] \\cdot \\Lambda_i(T_i|0)\\right] \\mathbf{W}_i Association parameters (\\boldsymbol{\\alpha}): \\nabla_{\\boldsymbol{\\alpha}} Q = \\sum_{=1}^{n} \\left[\\delta_i \\mathbf{m}_i(T_i) - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\alpha}}\\right]","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"gradient-with-respect-to-linear-acceleration-coefficients-boldsymbolbeta","dir":"Articles","previous_headings":"Computational Details > Explicit Forms of Gradient Components","what":"Gradient with Respect to Linear Acceleration Coefficients \\boldsymbol{\\beta}","title":"Technical Details","text":"gradient respect linear acceleration coefficients : \\nabla_{\\boldsymbol{\\beta}} Q = \\sum_{=1}^{n}\\sum_{j=1}^{n_i} \\frac{r_{ij}}{\\sigma_e^2} \\frac{\\partial m_i(T_{ij})}{\\partial \\boldsymbol{\\beta}} + \\sum_{=1}^{n} \\left[\\delta_i \\boldsymbol{\\alpha}^{\\top} \\frac{\\partial \\mathbf{m}_i(T_i)}{\\partial \\boldsymbol{\\beta}} - E[e^{b_i}|\\mathcal{O}_i] \\frac{\\partial \\Lambda_i(T_i|0)}{\\partial \\boldsymbol{\\beta}}\\right] r_{ij} = V_{ij} - m_i(T_{ij}) - \\hat{b}_i denotes residual observed fitted values.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"computing-the-required-sensitivities","dir":"Articles","previous_headings":"Computational Details","what":"Computing the Required Sensitivities","title":"Technical Details","text":"gradient expressions involve two types sensitivities must computed numerically:","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"cumulative-hazard-sensitivities","dir":"Articles","previous_headings":"Computational Details > Computing the Required Sensitivities","what":"Cumulative Hazard Sensitivities","title":"Technical Details","text":"cumulative hazard function \\Lambda_i(T_i|0) depends parameters instantaneous hazard. parameters affecting hazard directly, sensitivities computed : \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\eta}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\mathbf{B}^{(\\lambda)}(t)\\,\\mathrm{d}t,\\quad \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\alpha}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\mathbf{m}_i(t)\\,\\mathrm{d}t,\\quad \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\phi}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\mathbf{W}_i\\,\\mathrm{d}t parameters affecting trajectory m_i(t), chain rule yields: \\frac{\\partial\\Lambda_i(T_i|0)}{\\partial\\boldsymbol{\\beta}}=\\int_{0}^{T_i}\\lambda_i(t|0)\\boldsymbol{\\alpha}^{\\top}\\frac{\\partial\\mathbf{m}_i(t)}{\\partial\\boldsymbol{\\beta}}\\,\\mathrm{d}t","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"trajectory-sensitivities","dir":"Articles","previous_headings":"Computational Details > Computing the Required Sensitivities > Cumulative Hazard Sensitivities","what":"Trajectory Sensitivities","title":"Technical Details","text":"trajectory sensitivities respect parameters affecting ODE system complex must computed numerically. sensitivities satisfy following relationships: single-index coefficients (\\boldsymbol{\\beta}): trajectory sensitivities evolve according : \\frac{\\partial m_i(t)}{\\partial \\boldsymbol{\\beta}} = \\int_{0}^{t} \\frac{\\partial\\dot{m}_i(s)}{\\partial \\boldsymbol{\\beta}} \\,\\mathrm{d}s,\\quad \\frac{\\partial\\dot{m}_i(t)}{\\partial \\boldsymbol{\\beta}} = \\int_{0}^{t} \\frac{\\partial \\ddot{m}_i(s)}{\\partial \\boldsymbol{\\beta}} \\,\\mathrm{d}s acceleration sensitivity given : \\frac{\\partial \\ddot{m}_i(t)}{\\partial \\boldsymbol{\\beta}} = \\mathbf{Z}_i(t) + \\boldsymbol{\\beta}^{\\top} \\frac{\\partial \\mathbf{Z}_i(t)}{\\partial\\boldsymbol{\\beta}} , \\mathbf{Z}_i(t) = [m_i(t), \\dot{m}_i(t), \\mathbf{X}_i^{\\top}(t), t]^{\\top} feature vector. Since acceleration now linear \\boldsymbol{\\beta}, : \\frac{\\partial \\mathbf{Z}_i(t)}{\\partial\\boldsymbol{\\beta}} = \\begin{bmatrix} \\frac{\\partial m_i(t)}{\\partial \\boldsymbol{\\beta}} \\\\ \\frac{\\partial \\dot{m}_i(t)}{\\partial \\boldsymbol{\\beta}} \\\\ \\mathbf{0} \\\\ 0 \\end{bmatrix} covariates \\mathbf{X}_i(t) time t depend \\boldsymbol{\\beta}.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"numerical-methods-for-sensitivity-computation","dir":"Articles","previous_headings":"Computational Details","what":"Numerical Methods for Sensitivity Computation","title":"Technical Details","text":"linear acceleration model, sensitivities can computed efficiently. Two computational strategies available: Forward Sensitivity Method: Augments original ODE system sensitivity equations integrated simultaneously state equations Adjoint Method: Solves backward--time adjoint system, offering computational advantages number parameters exceeds number objective function evaluations","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"forward-sensitivity-method","dir":"Articles","previous_headings":"Computational Details > Numerical Methods for Sensitivity Computation","what":"Forward Sensitivity Method","title":"Technical Details","text":"forward method extends original three-dimensional state space include sensitivity trajectories, solving augmented ODE systems simultaneously evolve primary state variables parameter sensitivities. Augmented system: \\frac{d}{dt}\\begin{bmatrix} \\Lambda_i \\\\ m_i \\\\ \\dot{m}_i \\\\ \\partial\\Lambda_{\\eta,} \\\\ \\partial\\Lambda_{\\alpha,} \\\\ \\partial m_{,\\beta} \\\\ \\partial\\dot{m}_{,\\beta} \\\\ \\partial\\Lambda_{\\beta,} \\end{bmatrix} = \\begin{bmatrix} \\lambda_i(t|0) \\\\ \\dot{m}_i(t) \\\\ \\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t) \\\\ \\mathbf{B}^{(\\lambda)}(t) \\lambda_i(t|0) \\\\ \\mathbf{m}_i(t) \\lambda_i(t|0) \\\\ \\partial \\dot{m}_{,\\beta} \\\\ \\mathbf{Z}_i(t) + \\boldsymbol{\\beta}^{\\top} \\frac{\\partial \\mathbf{Z}_i(t)}{\\partial\\boldsymbol{\\beta}} \\\\ \\boldsymbol{\\alpha}^{\\top}\\frac{\\partial\\mathbf{m}_i(t)}{\\partial\\boldsymbol{\\beta}} \\cdot \\lambda_i(t|0) \\end{bmatrix} Note \\partial\\Lambda_{\\phi,} = 0 since survival covariates \\mathbf{W}_i affect trajectory dynamics. , \\partial\\Lambda_{\\eta,}, \\partial\\Lambda_{\\alpha,}, \\partial\\Lambda_{\\beta,} denote cumulative hazard sensitivities respect corresponding parameter groups. single augmented system must integrated t=0 t=T_i subject obtain complete sensitivity information required gradient computation.","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"adjoint-method","dir":"Articles","previous_headings":"Computational Details > Numerical Methods for Sensitivity Computation","what":"Adjoint Method","title":"Technical Details","text":"adjoint method provides alternative, memory-efficient approach computing gradients, particularly advantageous number parameters substantially exceeds number objective function components. Instead propagating sensitivities forward time, method solves backward--time adjoint system. Mathematical Foundation Given ODE system \\frac{d\\mathbf{s}}{dt} = F(t, \\mathbf{s}; \\boldsymbol{\\theta}) \\mathbf{s}(0) = \\mathbf{s}_0, derive adjoint sensitivity formula. Since \\mathbf{s}(t) satisfies ODE, function \\boldsymbol{\\kappa}(t): \\mathbf{s}(T) = \\mathbf{s}(T) - \\int_0^T \\boldsymbol{\\kappa}^{\\top} \\left[\\frac{d\\mathbf{s}}{dt} - F\\right] dt Differentiating respect \\boldsymbol{\\theta} using integration parts: \\frac{\\partial \\mathbf{s}(T)}{\\partial \\boldsymbol{\\theta}} = \\int_0^T \\boldsymbol{\\kappa}^{\\top} \\frac{\\partial F}{\\partial \\boldsymbol{\\theta}} dt - \\boldsymbol{\\kappa}(T)^{\\top} \\frac{\\partial \\mathbf{s}(T)}{\\partial \\boldsymbol{\\theta}} + \\int_0^T \\left[\\frac{d\\boldsymbol{\\kappa}}{dt} + \\left(\\frac{\\partial F}{\\partial \\mathbf{s}}\\right)^{\\top} \\boldsymbol{\\kappa}\\right]^{\\top} \\frac{\\partial \\mathbf{s}}{\\partial \\boldsymbol{\\theta}} dt Define \\tilde{\\boldsymbol{\\kappa}} = \\boldsymbol{\\kappa} + \\mathbf{e}_k choose satisfy: \\frac{d\\tilde{\\boldsymbol{\\kappa}}}{dt} = -\\left(\\frac{\\partial F}{\\partial \\mathbf{s}}\\right)^{\\top} \\tilde{\\boldsymbol{\\kappa}}, \\quad \\tilde{\\boldsymbol{\\kappa}}(T) = \\mathbf{e}_k choice eliminates \\frac{\\partial \\mathbf{s}}{\\partial \\boldsymbol{\\theta}} terms, yielding: \\frac{\\partial \\mathbf{s}_k(T)}{\\partial \\boldsymbol{\\theta}} = \\int_0^T \\tilde{\\boldsymbol{\\kappa}}^{\\top} \\frac{\\partial F}{\\partial \\boldsymbol{\\theta}}\\bigg|_{\\mathbf{s}} dt \\mathbf{e}_k k-th unit vector (.e., vector 1 k-th position 0 elsewhere).","code":""},{"path":"http://gongziyang.com/JointODE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ziyang Gong. Author, maintainer.","code":""},{"path":"http://gongziyang.com/JointODE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gong Z (2025). JointODE: Joint Modeling Longitudinal Survival Data Using ODEs. R package version 0.1.0, https://github.com/ziyangg98/JointODE.","code":"@Manual{,   title = {JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs},   author = {Ziyang Gong},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/ziyangg98/JointODE}, }"},{"path":"http://gongziyang.com/JointODE/index.html","id":"jointode","dir":"","previous_headings":"","what":"Joint Modeling of Longitudinal and Survival Data Using ODEs","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"JointODE package provides unified framework joint modeling longitudinal biomarker measurements time--event outcomes using ordinary differential equations (ODEs). approach enables simultaneous analysis biomarker trajectories impact survival outcomes.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/index.html","id":"longitudinal-model","dir":"","previous_headings":"Model Setup","what":"Longitudinal Model","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"observed biomarker measurements modeled : V_{ij}=m_i(T_{ij})+b_i+\\varepsilon_{ij},\\quad =1,\\ldots,n,\\quad j=1,\\ldots,n_i : V_{ij}: Observed biomarker value subject time T_{ij} m_i(t): True underlying biomarker trajectory b_i\\sim\\mathcal{N}(0,\\sigma_{b}^{2}): Subject-specific random intercept \\varepsilon_{ij}\\sim\\mathcal{N}(0,\\sigma_{e}^{2}): Measurement error biomarker trajectory evolution characterized following second-order differential equation: \\ddot{m}_i(t) = f\\big(m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t), t\\big) f: \\mathbb{R} \\times \\mathbb{R} \\times \\mathbb{R}^p \\times \\mathbb{R}^+ \\\\mathbb{R} smooth function modeling biomarker acceleration function current value m_i(t), velocity \\dot{m}_i(t), time-varying covariates \\mathbf{X}_i(t) \\\\mathbb{R}^p, time t.","code":""},{"path":"http://gongziyang.com/JointODE/index.html","id":"survival-model","dir":"","previous_headings":"Model Setup","what":"Survival Model","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"hazard function incorporates biomarker dynamics: \\lambda_i(t) = \\lambda_{0}(t)\\exp\\left[\\mathbf{m}_i(t)^{\\top}\\boldsymbol{\\alpha}+\\mathbf{W}_i^{\\top}\\boldsymbol{\\phi}+b_{}\\right] : \\lambda_{0}(t): Baseline hazard (e.g., Weibull, piecewise constant) \\mathbf{m}_i(t)=\\left(m_i(t), \\dot{m}_i(t)\\right)^{\\top}: Biomarker value velocity \\boldsymbol{\\alpha}=(\\alpha_1, \\alpha_2)^{\\top}: Association parameters value velocity \\mathbf{W}_i: Baseline covariates coefficients \\boldsymbol{\\phi} b_i: Subject-specific random intercept detailed mathematical derivations including ODE formulation, likelihood construction, EM algorithm specifics, see technical documentation.","code":""},{"path":"http://gongziyang.com/JointODE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"can install development version JointODE GitHub :","code":"# install.packages(\"pak\") pak::pak(\"ziyangg98/JointODE\")"},{"path":"http://gongziyang.com/JointODE/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"’s basic example demonstrating typical usage:","code":"library(JointODE) #> #> Attaching package: 'JointODE' #> The following object is masked from 'package:stats': #> #>     simulate  # Load example dataset data(sim)  # Fit joint ODE model fit <- JointODE(   longitudinal_formula = sim$formulas$longitudinal,   survival_formula = sim$formulas$survival,   longitudinal_data = sim$data$longitudinal_data,   survival_data = sim$data$survival_data )  # Model summary summary(fit) #> #> Call: #> JointODE(longitudinal_formula = sim$formulas$longitudinal, survival_formula = sim$formulas$survival, #>     longitudinal_data = sim$data$longitudinal_data, survival_data = sim$data$survival_data) #> #> Data Descriptives: #> Longitudinal Process            Survival Process #> Number of Observations: 1529    Number of Events: 73 (73%) #> Number of Subjects: 100 #> #>        AIC        BIC     logLik #>  -2592.179  -2545.286   1314.090 #> #> Coefficients: #> Longitudinal Process: Second-Order ODE Model #>              Estimate Std. Error z value Pr(>|z|) #> v_value     -0.600890   0.003737 -160.80   <2e-16 *** #> v_slope     -0.400776   0.006375  -62.87   <2e-16 *** #> (Intercept)  0.294265   0.002673  110.07   <2e-16 *** #> x1          -0.800519   0.005831 -137.28   <2e-16 *** #> x2           0.497675   0.003858  129.00   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> #> Survival Process: Proportional Hazards Model #>         Estimate Std. Error z value Pr(>|z|) #> v_value   0.4462     0.1233   3.617 0.000298 *** #> v_slope   0.9769     0.3416   2.860 0.004243 ** #> w1        0.5006     0.1364   3.671 0.000241 *** #> w2       -0.7852     0.1241  -6.329 2.46e-10 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> #> Baseline Hazard: B-spline with 7 basis functions #> (Coefficients range: [-3.646, -0.640] ) #> #> Variance Components: #>               StdDev #> Random Effect       0.101471 #> Residual            0.098552 #> #> Model Diagnostics: #> C-index (Concordance): 0.584 #> Convergence: EM algorithm converged after 32 iterations  # Generate predictions predictions <- predict(fit, times = seq(0, 10, by = 0.25))"},{"path":"http://gongziyang.com/JointODE/index.html","id":"visualization","dir":"","previous_headings":"","what":"Visualization","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"","code":"#> #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #> #>     filter, lag #> The following objects are masked from 'package:base': #> #>     intersect, setdiff, setequal, union"},{"path":"http://gongziyang.com/JointODE/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"Please note JointODE project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","title":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","text":"Implements joint modeling longitudinal biomarker trajectories time--event outcomes using ordinary differential equations (ODEs). package provides tools simultaneous analysis biomarker dynamics survival data, capturing complex temporal patterns ODE-based trajectory modeling accounting association event times shared random effects.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/reference/JointODE-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","text":"Maintainer: Ziyang Gong meetziyang@gmail.com","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"Implements unified framework jointly modeling longitudinal biomarker trajectories time--event outcomes using ordinary differential equations (ODEs). model captures complex non-linear dynamics biomarker evolution simultaneously quantifying association survival risk shared random effects flexible hazard specifications.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"","code":"JointODE(   longitudinal_formula,   survival_formula,   longitudinal_data,   survival_data,   id = \"id\",   time = \"time\",   autonomous = TRUE,   spline_baseline = list(degree = 3, n_knots = 3, knot_placement = \"quantile\",     boundary_knots = NULL),   robust = FALSE,   init = NULL,   control = list(),   parallel = FALSE,   n_cores = NULL,   ... )"},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"longitudinal_formula formula specifying longitudinal submodel. left-hand side defines response variable, right-hand side specifies fixed effects including time-varying baseline covariates (e.g., biomarker ~ time + treatment + age). survival_formula formula survival submodel using Surv(time, status) notation left-hand side. right-hand side specifies baseline hazard covariates (e.g., Surv(event_time, event) ~ treatment + age). longitudinal_data data frame containing repeated measurements one row per observation. Required columns include subject identifier, measurement times, response values, covariates specified formula. survival_data data frame time--event information containing one row per subject. Must include event/censoring times, event indicators, baseline covariates. id Character string specifying column name subject identifiers. variable must present longitudinal survival datasets link observations (default: \"id\"). time Character string specifying column name measurement times longitudinal dataset (default: \"time\"). autonomous Logical flag indicating whether ODE system autonomous (time-independent). TRUE, acceleration computation excludes explicit time term, resulting \\(\\ddot{m}(t) = f(m(t), \\dot{m}(t), X)\\) instead \\(\\ddot{m}(t) = f(m(t), \\dot{m}(t), X, t)\\). Autonomous systems often better numerical stability theoretical properties (default: TRUE). spline_baseline list controlling B-spline representation baseline hazard function following components: degree Polynomial degree B-spline basis functions (default: 3, cubic splines) n_knots Number interior knots flexibility (default: 3, providing moderate flexibility) knot_placement Strategy positioning knots: \"quantile\" places knots quantiles observed event times, \"equal\" uses equally-spaced knots (default: \"quantile\") boundary_knots numeric vector length 2 specifying boundary knot locations. NULL, automatically set range observed event times (default: NULL) robust Logical flag indicating whether use robust variance estimation (default: FALSE). init Optional list providing initial values model parameters. structure fitted model's parameters component elements: coefficients list containing: baseline: Vector B-spline coefficients baseline hazard (length = number spline basis functions) hazard: Vector hazard parameters including association parameters (2) survival covariates acceleration: Vector longitudinal fixed effects including intercept covariates measurement_error_sd: Residual standard deviation (positive scalar) random_effect_sd: Random effect standard deviation (positive scalar) configurations Optional; provided, use spline configuration spline_baseline NULL, default initial values used (default: NULL). control list optimization algorithmic settings: method Optimization algorithm parameter estimation. Options include \"L-BFGS-B\", \"BFGS\", \"Nelder-Mead\" (default: \"L-BFGS-B\") maxit Maximum number iterations M-step optimization (default: 1000) em_maxit Maximum number EM algorithm iterations (default: 10) em_tol Convergence criterion EM algorithm based relative change log-likelihood (default: 1e-4) tol Numerical tolerance optimization convergence (default: 1e-2) verbose Controls diagnostic output: 0/FALSE silent operation, 1/TRUE iteration progress, 2 detailed parameter traces (default: FALSE) parallel Logical flag enabling parallel computation computationally intensive operations including posterior calculations, gradient evaluations, likelihood computations. Requires future future.apply packages (default: FALSE). n_cores Integer specifying number CPU cores parallel processing. NULL, automatically detects uses available cores minus one (default: NULL). ... Additional arguments passed internal optimization routines.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"S3 object class \"JointODE\" containing fitted model results: parameters list containing estimated parameters: coefficients: Named list baseline (B-spline coefficients baseline hazard), hazard (association survival covariate effects), acceleration (longitudinal fixed effects), measurement_error_sd (residual standard deviation), random_effect_sd (random effect standard deviation) configurations: Model configuration including spline basis specifications logLik Maximum log-likelihood value achieved convergence AIC Akaike Information Criterion model comparison BIC Bayesian Information Criterion adjusted sample size cindex Concordance index (C-index) measuring model's discrimination ability survival prediction convergence List containing convergence diagnostics: converged: Logical indicating convergence status em_iterations: Number EM iterations performed message: Descriptive convergence message random_effects List containing random effects estimates: estimates: Posterior means subject-specific random effects variances: Posterior variances random effects data Processed data used model fitting internal format control List control parameters used optimization call matched function call reproducibility","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"joint modeling framework integrates longitudinal survival processes shared random effects structure. longitudinal biomarker evolution characterized system ODEs can accommodate non-linear dynamics, feedback mechanisms, complex temporal patterns. survival component employs proportional hazards model instantaneous risk depends features derived longitudinal trajectory. Two association structures supported: Current value: hazard depends biomarker level time t Rate change: hazard depends biomarker's instantaneous slope Parameter estimation employs Expectation-Maximization (EM) algorithm : E-step: Adaptive Gauss-Hermite quadrature numerical integration M-step: Quasi-Newton optimization parameter updates","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"Data validation performed automatically informative error messages high-dimensional problems, parallel computation strongly recommended Convergence issues may arise sparse event data limited follow-Initial values computed using separate model fits provided","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE","text":"","code":"if (FALSE) { # \\dontrun{ fit <- JointODE(   longitudinal_formula = sim$formulas$longitudinal,   survival_formula = sim$formulas$survival,   longitudinal_data = sim$data$longitudinal_data,   survival_data = sim$data$survival_data ) summary(fit) } # }"},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"Computes gradients scalar-valued objective functions respect ODE parameters using adjoint sensitivity method. implementation requires analytical derivatives optimal performance accuracy.","code":""},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"","code":"adjoint(   ode_func,   jacobian_func,   x0,   params,   times,   data = NULL,   objective_func = NULL,   objective_grad = NULL,   running_cost = NULL,   running_cost_grad = NULL,   rtol = 1e-08,   atol = 1e-10,   method = \"lsoda\",   save_trajectory = FALSE )"},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"ode_func Function defining ODE system: function(t, x, params, data) returning list element 'dx' containing state derivatives dx/dt jacobian_func Required function providing analytical derivatives: function(t, x, params, data) returning list : df_dx: State Jacobian \\(\\partial f/\\partial x\\) (n_states × n_states matrix) df_dtheta: Parameter Jacobian \\(\\partial f/\\partial \\theta\\) (n_states × n_params matrix) x0 Initial state vector time t0 params Parameter vector \\(\\theta\\) compute sensitivities times Time grid ODE integration (must include t0 T) data Optional list containing constant auxiliary data objective_func Terminal cost function g(x(T), data) Returns scalar objective value final time objective_grad Required objective_func provided: function(x_final, data) returning gradient \\(\\partial g/\\partial x\\) final time running_cost Integrand function L(t, x, data) running cost Returns scalar cost rate time t running_cost_grad Required running_cost provided: function(t, x, data) returning gradient \\(\\partial L/\\partial x\\) rtol Relative error tolerance ODE solver (default: 1e-8) atol Absolute error tolerance ODE solver (default: 1e-10) method ODE solver algorithm (default: \"lsoda\" - adaptive solver) save_trajectory Whether return full state trajectory","code":""},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"Object class \"adjoint\" containing: objective Scalar value objective function J gradient Gradient vector \\(dJ/d\\theta\\) respect parameters final_state System state final time x(T) sensitivity_final Sensitivity matrix \\(\\partial x(T)/\\partial \\theta\\) final time trajectory Full state trajectory (save_trajectory = TRUE) n_states Number state variables n_params Number parameters times Time grid used integration","code":""},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"dynamical system described ordinary differential equations: $$dx/dt = f(t, x, \\theta, data)$$ $$x(t_0) = x_0$$ objective functional: $$J = g(x(T), data) + \\int_{t_0}^{T} L(t, x(t), data) dt$$ adjoint method efficiently computes gradient \\(dJ/d\\theta\\) solving: Forward ODE sensitivity equations (forward pass) Adjoint ODE backward time (running cost present) particularly efficient number parameters exceeds number objective functions.","code":""},{"path":"http://gongziyang.com/JointODE/reference/adjoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjoint Sensitivity Analysis for ODE Systems — adjoint","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Parameter estimation for exponential decay  # Define the ODE system: dx/dt = -\\theta x ode_system <- function(t, x, params, data) {   list(dx = -params[1] * x) }  # Provide analytical Jacobians jacobians <- function(t, x, params, data) {   list(     df_dx = matrix(-params[1], 1, 1),      # \\partial f/\\partial x     df_dtheta = matrix(-x, 1, 1)           # \\partial f/\\partial \\theta   ) }  # Define objective: squared error from target target_value <- 0.5 objective <- function(x_final, data) {   (x_final - target_value)^2 }  # Gradient of objective objective_gradient <- function(x_final, data) {   2 * (x_final - target_value) }  # Compute sensitivity result <- adjoint(   ode_func = ode_system,   jacobian_func = jacobians,   x0 = 1,   params = 0.5,   times = seq(0, 2, length.out = 21),   objective_func = objective,   objective_grad = objective_gradient )  print(result) } # }"},{"path":"http://gongziyang.com/JointODE/reference/coef.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Coefficients — coef.JointODE","title":"Extract Model Coefficients — coef.JointODE","text":"Extract Model Coefficients","code":""},{"path":"http://gongziyang.com/JointODE/reference/coef.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Coefficients — coef.JointODE","text":"","code":"# S3 method for class 'JointODE' coef(object, ...)"},{"path":"http://gongziyang.com/JointODE/reference/coef.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Coefficients — coef.JointODE","text":"object JointODE object ... Additional arguments","code":""},{"path":"http://gongziyang.com/JointODE/reference/coef.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Coefficients — coef.JointODE","text":"Named numeric vector fixed effects coefficients","code":""},{"path":"http://gongziyang.com/JointODE/reference/logLik.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Log-Likelihood — logLik.JointODE","title":"Extract Log-Likelihood — logLik.JointODE","text":"Extract Log-Likelihood","code":""},{"path":"http://gongziyang.com/JointODE/reference/logLik.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Log-Likelihood — logLik.JointODE","text":"","code":"# S3 method for class 'JointODE' logLik(object, ...)"},{"path":"http://gongziyang.com/JointODE/reference/logLik.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Log-Likelihood — logLik.JointODE","text":"object JointODE object ... Additional arguments","code":""},{"path":"http://gongziyang.com/JointODE/reference/logLik.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Log-Likelihood — logLik.JointODE","text":"Log-likelihood df nobs attributes","code":""},{"path":"http://gongziyang.com/JointODE/reference/predict.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for JointODE Models — predict.JointODE","title":"Predict Method for JointODE Models — predict.JointODE","text":"Computes predictions biomarker trajectories, velocities, accelerations, survival functions fitted JointODE model. method uses fitted model parameters random effects solve ODE system generate predictions subject.","code":""},{"path":"http://gongziyang.com/JointODE/reference/predict.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for JointODE Models — predict.JointODE","text":"","code":"# S3 method for class 'JointODE' predict(object, times = NULL, parallel = FALSE, n_cores = NULL, ...)"},{"path":"http://gongziyang.com/JointODE/reference/predict.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for JointODE Models — predict.JointODE","text":"object fitted JointODE model object. times Optional numeric vector time points evaluate predictions. NULL, uses union observation times event time subject. parallel Logical flag parallel computation. Default FALSE. n_cores Number CPU cores parallel processing. NULL, uses available cores minus one. ... Additional arguments (currently unused).","code":""},{"path":"http://gongziyang.com/JointODE/reference/predict.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for JointODE Models — predict.JointODE","text":"list containing predictions subject, element contains: id Subject identifier times Time points predictions biomarker Predicted biomarker values random effects velocity Predicted biomarker velocity acceleration Predicted biomarker acceleration cumhazard Cumulative hazard values survival Survival probability values","code":""},{"path":"http://gongziyang.com/JointODE/reference/predict.JointODE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Method for JointODE Models — predict.JointODE","text":"prediction process involves: Using fitted model parameters random effects Solving ODE system subject specified time points Computing biomarker trajectories random effects included Calculating cumulative hazard survival probabilities Random effects fitted model always included predictions provide subject-specific trajectories.","code":""},{"path":"http://gongziyang.com/JointODE/reference/print.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Print JointODE Model — print.JointODE","title":"Print JointODE Model — print.JointODE","text":"Print JointODE Model","code":""},{"path":"http://gongziyang.com/JointODE/reference/print.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print JointODE Model — print.JointODE","text":"","code":"# S3 method for class 'JointODE' print(x, digits = max(3L, getOption(\"digits\") - 3L), ...)"},{"path":"http://gongziyang.com/JointODE/reference/print.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print JointODE Model — print.JointODE","text":"x JointODE object digits Number digits numeric output ... Additional arguments","code":""},{"path":"http://gongziyang.com/JointODE/reference/print.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print JointODE Model — print.JointODE","text":"Invisibly returns object","code":""},{"path":"http://gongziyang.com/JointODE/reference/print.adjoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Adjoint Results — print.adjoint","title":"Print Method for Adjoint Results — print.adjoint","text":"Print Method Adjoint Results","code":""},{"path":"http://gongziyang.com/JointODE/reference/print.adjoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Adjoint Results — print.adjoint","text":"","code":"# S3 method for class 'adjoint' print(x, ...)"},{"path":"http://gongziyang.com/JointODE/reference/print.adjoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Adjoint Results — print.adjoint","text":"x object class \"adjoint\" ... Additional arguments (unused)","code":""},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Joint ODE Model Dataset — sim","title":"Simulated Joint ODE Model Dataset — sim","text":"Example dataset demonstrating JointODE package capabilities. Contains simulated longitudinal biomarker trajectories survival outcomes joint model framework ODE-governed dynamics.","code":""},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Joint ODE Model Dataset — sim","text":"","code":"sim"},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Joint ODE Model Dataset — sim","text":"list containing multiple components: data Original simulated data two data frames: longitudinal_data: Longitudinal biomarker measurements columns: id, time, v (observed value), x1, x2 (covariates), biomarker, velocity, acceleration (true latent values) survival_data: Survival outcomes (100 subjects) columns: id, time (event/censoring), status (1=event, 0=censored), w1, w2 (covariates), b (random effect) formulas Model formulas used data generation: longitudinal: Formula longitudinal model (v ~ x1 + x2) survival: Formula survival model (Surv(time, status) ~ w1 + w2) parameters Model parameters configurations: coefficients: True parameter values baseline: B-spline coefficients baseline hazard hazard: Association parameters (biomarker, velocity, w1, w2) acceleration: ODE acceleration parameters measurement_error_sd: Measurement error SD (0.1) random_effect_sd: Random effect SD (0.1) configurations: Spline configurations baseline: Complete B-spline configuration baseline hazard including knots degree autonomous: Whether ODE autonomous (TRUE)","code":""},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated Joint ODE Model Dataset — sim","text":"Generated using JointODE:::.create_example_data(n = 100)","code":""},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated Joint ODE Model Dataset — sim","text":"Generated using .create_example_data(n = 100) default parameters. Features include: 100 subjects adaptive visit schedules Weibull baseline hazard (shape=1, scale=8) 10\\ Administrative censoring 50-95th percentiles detailed simulation methodology, see simulate.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated Joint ODE Model Dataset — sim","text":"","code":"# Load the dataset data(sim)  # Examine structure str(sim$data$longitudinal_data) #> 'data.frame':\t1529 obs. of  8 variables: #>  $ id          : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ time        : num  0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.5 ... #>  $ v           : num  0.0888 0.0843 0.1606 0.2058 0.4456 ... #>  $ x1          : num  -0.00462 -0.00462 -0.00462 -0.00462 -0.00462 ... #>  $ x2          : num  1.33 1.33 1.33 1.33 1.33 ... #>  $ biomarker   : num  0 0.0293 0.1123 0.241 0.4065 ... #>  $ velocity    : num  0 0.23 0.429 0.595 0.723 ... #>  $ acceleration: num  0.971 0.862 0.732 0.589 0.438 ... str(sim$data$survival_data) #> 'data.frame':\t100 obs. of  6 variables: #>  $ id    : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ time  : num  2.75 7.93 1.96 14.83 2.22 ... #>  $ status: int  1 1 1 1 1 1 1 1 1 1 ... #>  $ w1    : num  1.201 1.045 -1.003 1.848 -0.667 ... #>  $ w2    : num  -2.001 0.334 1.171 2.06 -1.377 ... #>  $ b     : num  0.1371 -0.0565 0.0363 0.0633 0.0404 ...  # Basic summary statistics cat(\"Number of subjects:\",     length(unique(sim$data$longitudinal_data$id)), \"\\n\") #> Number of subjects: 100  cat(\"Event rate:\", mean(sim$data$survival_data$status), \"\\n\") #> Event rate: 0.73  cat(\"Average observations per subject:\",     nrow(sim$data$longitudinal_data) /     nrow(sim$data$survival_data), \"\\n\") #> Average observations per subject: 15.29   # Visualize longitudinal trajectories if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   library(ggplot2)    # Plot trajectories for first 9 subjects   plot_data <- subset(sim$data$longitudinal_data, id <= 9)    ggplot(plot_data, aes(x = time, y = v, group = id)) +     geom_line(alpha = 0.7) +     geom_point(size = 1) +     facet_wrap(~ id, scales = \"free_y\") +     theme_minimal() +     labs(x = \"Time (years)\", y = \"Observed Biomarker Value\",          title = \"Simulated Longitudinal Trajectories\") }"},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Joint ODE Model Data — simulate","title":"Simulate Joint ODE Model Data — simulate","text":"Generates synthetic data sophisticated joint modeling framework seamlessly integrates longitudinal biomarker trajectories survival outcomes ordinary differential equations (ODEs). simulation engine produces realistic clinical trial datasets complex biomarker dynamics govern event hazards via shared random effects trajectory features, capturing intricate interplay disease progression time--event processes.","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Joint ODE Model Data — simulate","text":"","code":"simulate(   n = 100,   alpha = c(0.3, 0.7),   beta = c(-0.6, -0.4, 0.3, -0.8, 0.5, 0),   phi = c(0.4, -0.6),   weibull_shape = 1.5,   weibull_scale = 8,   sigma_b = 0.1,   sigma_e = 0.1,   seed = 42,   verbose = FALSE )"},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Joint ODE Model Data — simulate","text":"n Integer. Number subjects simulate. Larger cohorts provide stable parameter estimates (default: 100). alpha Numeric vector length 2. Association parameters quantifying trajectory features influence survival hazard: [biomarker, velocity]. Positive values indicate increased risk (default: c(0.3, 0.7)). beta Numeric vector governing ODE dynamics (length 6). Controls biomarker trajectory evolution: [biomarker, velocity,   intercept, x1, x2, time] (default: c(-0.6, -0.4, 0.3, -0.8, 0.5, 0.0)). phi Numeric vector length 2. Baseline covariate effects modulating survival hazard independently biomarker dynamics: [w1, w2] (default: c(0.4, -0.6)). weibull_shape Numeric. Weibull shape parameter (\\(\\kappa\\)) characterizing baseline hazard evolution. Values > 1 yield increasing hazard (aging effect), < 1 decreasing hazard (selection effect), = 1 constant hazard (exponential) (default: 1). weibull_scale Numeric. Weibull scale parameter (\\(\\theta\\)) determining characteristic event time. Larger values shift hazard curve rightward (default: 8). sigma_b Numeric. Standard deviation subject-specific random effects capturing unobserved heterogeneity. Larger values increase -subject variability trajectories hazards (default: 0.1). sigma_e Numeric. Measurement error standard deviation reflecting assay precision biological fluctuations. Smaller values indicate reliable biomarker measurements (default: 0.1). seed Integer. Random seed ensuring reproducible simulations. Essential method validation comparison studies (default: 42). verbose Logical. Display informative progress messages simulation workflow (default: FALSE).","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Joint ODE Model Data — simulate","text":"list containing two complementary datasets: longitudinal_data Data frame longitudinal measurements: id: Subject identifier time: Measurement time v: Observed biomarker value incorporating latent trajectory, random effect, measurement error x1: First longitudinal covariate (standardized) x2: Second longitudinal covariate (standardized) biomarker: True latent biomarker trajectory value velocity: True latent biomarker velocity value acceleration: True latent biomarker acceleration value survival_data Data frame survival outcomes: id: Subject identifier time: Observed event/censoring time status: Event indicator (1 = event, 0 = censored) w1: First survival covariate (standardized) w2: Second survival covariate (standardized) b: Shared random effect","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Joint ODE Model Data — simulate","text":"Mathematical Framework simulation orchestrates sophisticated joint model architecture comprising two intricately coupled components: 1. Longitudinal Dynamics Biomarker evolution governed second-order linear ODE system captures temporal dynamics: $$\\ddot{m}_i(t) = \\boldsymbol{\\beta}^{\\top} \\mathbf{Z}_i(t)$$ : \\(m_i(t)\\): Latent biomarker trajectory subject \\(\\) \\(\\mathbf{Z}_i(t) = [m_i(t), \\dot{m}_i(t), 1, X_1, X_2]^{\\top}\\): State vector (5-dimensional) \\(\\boldsymbol{\\beta}\\): Parameter vector governing homeostatic feedback, damping forces, external influences Observed measurements arise hierarchical structure incorporating systematic stochastic components: $$V_{ij} = m_i(T_{ij}) + b_i + \\varepsilon_{ij}$$ \\(b_i \\sim N(0, \\sigma_b^2)\\) captures subject-specific deviations \\(\\varepsilon_{ij} \\sim N(0, \\sigma_e^2)\\) represents measurement variability. 2. Survival Process instantaneous hazard function elegantly links biomarker dynamics event risk multiplicative model: $$\\lambda_i(t|b_i) = \\lambda_0(t) \\exp[\\boldsymbol{\\alpha}^{\\top}   \\mathbf{m}_i(t) + \\mathbf{W}_i^{\\top} \\boldsymbol{\\phi} + b_i]$$ : \\(\\lambda_0(t) = (\\kappa/\\theta)(t/\\theta)^{\\kappa-1}\\): Weibull baseline hazard capturing population-level risk evolution \\(\\mathbf{m}_i(t) = [m_i(t), \\dot{m}_i(t)]^{\\top}\\): Comprehensive trajectory feature vector \\(\\mathbf{W}_i\\): Time-invariant baseline characteristics \\(b_i\\): Shared random effect inducing correlation longitudinal survival processes Simulation Workflow data generation proceeds carefully orchestrated pipeline: ODE Integration: Numerical solution coupled ODE system using adaptive Runge-Kutta methods automatic step size control optimal accuracy-efficiency tradeoff Event Time Generation: Sophisticated sampling conditional hazard distribution via simsurv engine, accounting complex time-varying covariates Censoring Mechanism: Realistic administrative censoring uniformly distributed 50th 95th percentiles event times, mimicking clinical trial follow-patterns Visit Scheduling: Adaptive measurement protocols higher frequency critical periods (quarterly initially, semi-annual subsequently) stochastic 10% missingness Parameter Interpretation Guide Trajectory Dynamics (beta): beta[1]: Homeostatic feedback strength (negative values promote stability) beta[2]: Damping coefficient controlling oscillation suppression beta[3]: Intercept term baseline acceleration beta[4-5]: Sensitivity covariates X1 X2 Hazard Association (alpha): alpha[1]: Current biomarker value effect (positive indicates deleterious biomarker) alpha[2]: Velocity effect capturing prognostic value trajectory direction","code":""},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulate Joint ODE Model Data — simulate","text":"Visit schedules intelligently adapt individual follow-durations, balancing information gain practical constraints Progress reporting can silenced via verbose = FALSE batch simulations","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/reference/simulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Joint ODE Model Data — simulate","text":"","code":"# Basic usage with default parameters sim <- simulate() str(sim) #> List of 2 #>  $ longitudinal_data:'data.frame':\t1529 obs. of  8 variables: #>   ..$ id          : int [1:1529] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ time        : num [1:1529] 0 0.25 0.5 0.75 1 1.25 1.5 1.75 2 2.5 ... #>   ..$ v           : num [1:1529] 0.0888 0.0843 0.1606 0.2058 0.4456 ... #>   ..$ x1          : num [1:1529] -0.00462 -0.00462 -0.00462 -0.00462 -0.00462 ... #>   ..$ x2          : num [1:1529] 1.33 1.33 1.33 1.33 1.33 ... #>   ..$ biomarker   : num [1:1529] 0 0.0293 0.1123 0.241 0.4065 ... #>   ..$ velocity    : num [1:1529] 0 0.23 0.429 0.595 0.723 ... #>   ..$ acceleration: num [1:1529] 0.971 0.862 0.732 0.589 0.438 ... #>  $ survival_data    :'data.frame':\t100 obs. of  6 variables: #>   ..$ id    : int [1:100] 1 2 3 4 5 6 7 8 9 10 ... #>   ..$ time  : num [1:100] 2.75 7.93 1.96 14.83 2.22 ... #>   ..$ status: int [1:100] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ w1    : num [1:100] 1.201 1.045 -1.003 1.848 -0.667 ... #>   ..$ w2    : num [1:100] -2.001 0.334 1.171 2.06 -1.377 ... #>   ..$ b     : num [1:100] 0.1371 -0.0565 0.0363 0.0633 0.0404 ...  # Check data characteristics cat(\"Event rate:\", mean(sim$survival_data$status), \"\\n\") #> Event rate: 0.73  cat(   \"Observations per subject:\",   nrow(sim$longitudinal_data) / nrow(sim$survival_data), \"\\n\" ) #> Observations per subject: 15.29   # Visualize trajectories with survival information library(ggplot2) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Select subjects with different outcomes plot_data <- sim$longitudinal_data %>%   left_join(sim$survival_data[, c(\"id\", \"time\", \"status\")],     by = \"id\", suffix = c(\"\", \"_event\")   ) %>%   filter(id %in% sample(unique(id), 9))  ggplot(plot_data, aes(x = time, y = v)) +   geom_line(aes(color = factor(status)), alpha = 0.7) +   geom_point(aes(color = factor(status)), size = 1) +   geom_vline(aes(xintercept = time_event),     linetype = \"dashed\", alpha = 0.5   ) +   facet_wrap(~id, scales = \"free_y\", ncol = 3) +   scale_color_manual(     values = c(\"0\" = \"blue\", \"1\" = \"red\"), labels = c(\"Censored\", \"Event\")   ) +   theme_minimal() +   labs(     x = \"Time (years)\", y = \"Biomarker Value\", color = \"Outcome\",     title = \"Simulated Longitudinal Trajectories\"   )"},{"path":"http://gongziyang.com/JointODE/reference/summary.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of JointODE Model — summary.JointODE","title":"Summary of JointODE Model — summary.JointODE","text":"Summary JointODE Model","code":""},{"path":"http://gongziyang.com/JointODE/reference/summary.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of JointODE Model — summary.JointODE","text":"","code":"# S3 method for class 'JointODE' summary(object, ...)"},{"path":"http://gongziyang.com/JointODE/reference/summary.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of JointODE Model — summary.JointODE","text":"object JointODE object ... Additional arguments","code":""},{"path":"http://gongziyang.com/JointODE/reference/summary.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of JointODE Model — summary.JointODE","text":"summary.JointODE object coefficients test statistics","code":""},{"path":"http://gongziyang.com/JointODE/reference/vcov.JointODE.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Variance-Covariance Matrix — vcov.JointODE","title":"Extract Variance-Covariance Matrix — vcov.JointODE","text":"Extract Variance-Covariance Matrix","code":""},{"path":"http://gongziyang.com/JointODE/reference/vcov.JointODE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Variance-Covariance Matrix — vcov.JointODE","text":"","code":"# S3 method for class 'JointODE' vcov(object, ...)"},{"path":"http://gongziyang.com/JointODE/reference/vcov.JointODE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Variance-Covariance Matrix — vcov.JointODE","text":"object JointODE object ... Additional arguments","code":""},{"path":"http://gongziyang.com/JointODE/reference/vcov.JointODE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Variance-Covariance Matrix — vcov.JointODE","text":"Variance-covariance matrix fixed effects","code":""},{"path":"http://gongziyang.com/JointODE/news/index.html","id":"jointode-010","dir":"Changelog","previous_headings":"","what":"JointODE 0.1.0","title":"JointODE 0.1.0","text":"Joint modeling longitudinal biomarkers survival outcomes using ordinary differential equations (ODE) Support first second-order derivatives ODE formulation Parallel processing support computational efficiency","code":""}]
